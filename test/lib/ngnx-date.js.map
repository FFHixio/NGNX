{"version":3,"file":"ngnx-date.js","sources":["../../src/datetime/Duration.js","../../src/datetime/Interval.js","../../src/datetime/Iterator.js","../../src/datetime/DateTime.js","../../src/datetime/core.js"],"sourcesContent":["/**\r\n * @class NGNX.DATE.Duration\r\n * Represents an ISO-8601 [PnYnMnWnDTnHnMnS duration](https://en.wikipedia.org/wiki/ISO_8601#Durations)\r\n * as a usable object.\r\n */\r\nexport default class Duration {\r\n  /**\r\n   * @param {String} duration\r\n   * For example, `P1Y2M10DT2H30M` indicates the duration period is 1 year, 2 months,\r\n   * 10 days, 2 hours, and 30 minutes.\r\n   */\r\n  constructor (duration = null) {\r\n    Object.defineProperties(this, {\r\n      METADATA: NGN.private({\r\n        source: duration,\r\n        valid: false,\r\n        years: 0,\r\n        months: 0,\r\n        weeks: 0,\r\n        days: 0,\r\n        hours: 0,\r\n        minutes: 0,\r\n        seconds: 0\r\n      }),\r\n\r\n      PRIVATE: NGN.privateconst({\r\n        ISO8601P: /^P((\\d*)Y)?((\\d*)M)?((\\d*)W)?((\\d*)D)?T?((\\d*)H)?((\\d*)M)?((\\d*)S)?$/, // PnYnMnDTnHnMnS\r\n\r\n        autoIncrement: (element, max, parent) => {\r\n          if (element > max) {\r\n            parent += Math.floor(element / (max + 1))\r\n            element = element % (max + 1)\r\n          }\r\n        }\r\n      })\r\n    })\r\n\r\n    if (duration !== null) {\r\n      let match = this.PRIVATE.ISO8601P.exec(duration)\r\n\r\n      if (match !== null) {\r\n        this.years = parseInt(match[2]) || 0\r\n        this.months = parseInt(match[4]) || 0\r\n        this.weeks = parseInt(match[6]) || 0\r\n        this.days = parseInt(match[8]) || 0\r\n        this.hours = parseInt(match[10]) || 0\r\n        this.minutes = parseInt(match[12]) || 0\r\n        this.seconds = parseInt(match[14]) || 0\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @property {object} JSON\r\n   * Returns an object like:\r\n   * ```\r\n   * {\r\n   *   source: 'P1Y2M10DT2H30M',\r\n   *   valid: true, // Indicates input is a valid period pattern.\r\n   *   years: 1,\r\n   *   months: 2,\r\n   *   weeks: 0,\r\n   *   days: 10,\r\n   *   hours: 2,\r\n   *   minutes: 30,\r\n   *   seconds: 0\r\n   * }\r\n   * ```\r\n   */\r\n  get JSON () {\r\n    return {\r\n      source: this.source,\r\n      valid: this.valid,\r\n      years: this.years,\r\n      months: this.months,\r\n      weeks: this.weeks,\r\n      days: this.days,\r\n      hours: this.hours,\r\n      minutes: this.minutes,\r\n      seconds: this.seconds\r\n    }\r\n  }\r\n\r\n  get source () {\r\n    return this.METADATA.source\r\n  }\r\n\r\n  set source (value) {\r\n    this.METADATA.source = value\r\n  }\r\n\r\n  get valid () {\r\n    if (!this.PRIVATE.ISO8601P.test(this.METADATA.source)) {\r\n      return false\r\n    }\r\n\r\n    if ((this.METADATA.years + this.METADATA.months + this.METADATA.weeks + this.METADATA.days + this.METADATA.hours + this.METADATA.minutes + this.METADATA.seconds) === 0) {\r\n      NGN.WARN(`Duration \"${this.source}\" is invalid because all time periods are zero. To fix, specify at least one of the following values: years, months, weeks, days, hours, minutes, or seconds.`)\r\n      return false\r\n    }\r\n\r\n    if (this.weeks > 51) {\r\n      NGN.WARN(`Duration \"${this.source}\" is invalid because there cannot be more than 51 weeks in a duration. 52 weeks would convert to a year.`)\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  get years () {\r\n    return this.METADATA.years\r\n  }\r\n\r\n  set years (value) {\r\n    this.METADATA.years = Math.floor(value)\r\n\r\n    if (this.METADATA.years < 0) {\r\n      throw new Error('Negative year values are not allowed.')\r\n    }\r\n  }\r\n\r\n  get months () {\r\n    return this.METADATA.months\r\n  }\r\n\r\n  set months (value) {\r\n    this.METADATA.months = Math.floor(value)\r\n\r\n    if (this.METADATA.months < 0) {\r\n      throw new Error('Negative month values are not allowed.')\r\n    }\r\n\r\n    this.PRIVATE.autoIncrement(this.METADATA.months, 11, this.METADATA.years)\r\n  }\r\n\r\n  get weeks () {\r\n    return this.METADATA.weeks\r\n  }\r\n\r\n  set weeks (value) {\r\n    this.METADATA.weeks = Math.floor(value)\r\n\r\n    if (this.METADATA.weeks < 0) {\r\n      throw new Error('Negative week values are not allowed.')\r\n    }\r\n\r\n    this.PRIVATE.autoIncrement(this.METADATA.weeks, 51, this.METADATA.years)\r\n  }\r\n\r\n  get days () {\r\n    return this.METADATA.days\r\n  }\r\n\r\n  set days (value) {\r\n    this.METADATA.days = Math.floor(value)\r\n\r\n    if (this.METADATA.days < 0) {\r\n      throw new Error('Negative day values are not allowed.')\r\n    }\r\n  }\r\n\r\n  get hours () {\r\n    return this.METADATA.hours\r\n  }\r\n\r\n  set hours (value) {\r\n    this.METADATA.hours = Math.floor(value)\r\n\r\n    if (this.METADATA.hours < 0) {\r\n      throw new Error('Negative hour values are not allowed.')\r\n    }\r\n\r\n    this.PRIVATE.autoIncrement(this.METADATA.hours, 23, this.METADATA.days)\r\n  }\r\n\r\n  get minutes () {\r\n    return this.METADATA.minutes\r\n  }\r\n\r\n  set minutes (value) {\r\n    this.METADATA.minutes = Math.floor(value)\r\n\r\n    if (this.METADATA.minutes < 0) {\r\n      throw new Error('Negative minute values are not allowed.')\r\n    }\r\n\r\n    this.PRIVATE.autoIncrement(this.METADATA.minutes, 59, this.METADATA.hours)\r\n  }\r\n\r\n  get seconds () {\r\n    return this.METADATA.seconds\r\n  }\r\n\r\n  set seconds (value) {\r\n    this.METADATA.seconds = Math.floor(value)\r\n\r\n    if (this.METADATA.seconds < 0) {\r\n      throw new Error('Negative second values are not allowed.')\r\n    }\r\n\r\n    this.PRIVATE.autoIncrement(this.METADATA.seconds, 59, this.METADATA.minutes)\r\n  }\r\n\r\n  toString () {\r\n    let str = 'P'\r\n\r\n    if (this.METADATA.years > 0) {\r\n      str += `${this.METADATA.years}Y`\r\n    }\r\n\r\n    if (this.METADATA.months > 0) {\r\n      str += `${this.METADATA.months}M`\r\n    }\r\n\r\n    if (this.METADATA.weeks > 0) {\r\n      if (this.METADATA.hours === 0 && this.METADATA.minutes === 0 && this.METADATA.seconds === 0) {\r\n        str += `${this.METADATA.weeks}W`\r\n      } else {\r\n        this.METADATA.days += Math.floor(this.METADATA.weeks * 7)\r\n      }\r\n    }\r\n\r\n    if (this.METADATA.days > 0) {\r\n      str += `${this.METADATA.days}D`\r\n    }\r\n\r\n    // Short circuit the operation if a week exists.\r\n    // Weeks cannot be combined with times per ISO 8601 4.4.3 durations.\r\n    if (str.indexOf('W') >= 0) {\r\n      return str\r\n    }\r\n\r\n    if (this.METADATA.hours > 0 || this.METADATA.minutes > 0 || this.METADATA.seconds > 0) {\r\n      str += 'T'\r\n\r\n      if (this.METADATA.hours > 0) {\r\n        str += `${this.METADATA.hours}H`\r\n      }\r\n\r\n      if (this.METADATA.minutes > 0) {\r\n        str += `${this.METADATA.minutes}M`\r\n      }\r\n\r\n      if (this.METADATA.seconds > 0) {\r\n        str += `${this.METADATA.seconds}S`\r\n      }\r\n    }\r\n\r\n    return str\r\n  }\r\n}\r\n","import Duration from './Duration'\r\n\r\n/**\r\n * @class NGNX.DATE.Interval\r\n * Represents an ISO-8601:2004 interval (optionally repeating).\r\n * This class handles recurrence patterns, making them\r\n * accessible as a usable object.\r\n */\r\nexport default class DateInterval {\r\n  /**\r\n   * @param {String} interval\r\n   * The date/recurrence string, which should follow the [Rn/YYYY-MM-DDTHH:NN:SSZ/PnYnMnWnDTnHnMnS pattern](https://en.wikipedia.org/wiki/ISO_8601#Durations).\r\n   * For example, `R5/2008-03-01T13:00:00Z/P1Y2M10DT2H30M` indicates the\r\n   * pattern should be repeated 5 times, starting on March 1, 2008 at 1:00PM UTC. It should be repeated every 1 year, 2 months, 10 days, 2 hours, and 30 minutes.\r\n   */\r\n  constructor (interval) {\r\n    Object.defineProperties(this, {\r\n      METADATA: NGN.private({\r\n        source: interval,\r\n        years: 0,\r\n        months: 0,\r\n        weeks: 0,\r\n        days: 0,\r\n        hours: 0,\r\n        minutes: 0,\r\n        seconds: 0,\r\n        start: null,\r\n        end: null,\r\n        timezone: null,\r\n        intervalCount: 0,\r\n        duration: null\r\n      }),\r\n\r\n      PRIVATE: NGN.privateconst({\r\n        DATE: /(\\d{4}(?:-\\d{2}){2})T(\\d{2}(?::\\d{2}){2}(?:\\.\\d*)?([A-Za-z]*)?)/i,\r\n        PERIOD: /(P(?=.)(?:\\d+Y)?(?:\\d+M)?(?:\\d+D)?(?:T(?=.)(?:\\d+H)?(?:\\d+M)?(?:\\d+S)?)?)/i\r\n        // ISO8601R: /^(R(\\d*){0,10}\\/)?(\\d{4}(?:-\\d{2}){2})T(\\d{2}(?::\\d{2}){2}(?:\\.\\d*)?([A-Za-z]*)?)\\/(P(?=.)(?:\\d+Y)?(?:\\d+M)?(?:\\d+D)?(?:T(?=.)(?:\\d+H)?(?:\\d+M)?(?:\\d+S)?)?)$/ // Rn/PnYnMnDTnHnMnS\r\n      })\r\n    })\r\n\r\n    NGN.BUS.on(NGN.WARNING_EVENT, m => console.log(m))\r\n\r\n    // Process each section of the interval\r\n    interval.split('/').forEach((element, i) => {\r\n      // Identify repeating interval\r\n      if (i === 0 && /^R[0-9]?/i.test(element)) {\r\n        this.intervalCount = parseInt(NGN.coalesceb(element.replace(/^\\R/i, ''), '-1'), 10)\r\n      } else {\r\n\r\n        // Identify duration, start/end dates\r\n        if (this.PRIVATE.PERIOD.test(element)) {\r\n          this.METADATA.duration = new Duration(element)\r\n        } else {\r\n          if (this.METADATA.duration === null && this.METADATA.start === null) {\r\n            this.METADATA.start = new Date(element)\r\n          } else {\r\n            this.METADATA.end = new Date(element)\r\n          }\r\n        }\r\n      }\r\n    })\r\n\r\n    if (this.METADATA.start !== null || this.METADATA.end !== null) {\r\nconsole.log(NGN.coalesce(this.METADATA.start, this.METADATA.end));\r\n      let date = this.PRIVATE.DATE.exec(NGN.coalesce(this.METADATA.start, this.METADATA.end).toISOString())\r\n\r\n      this.METADATA.timezone = date[3]\r\n    }\r\n\r\n    console.log(this.JSON)\r\n    console.log(this.toString())\r\n  }\r\n\r\n  get source () {\r\n    return this.METADATA.source\r\n  }\r\n\r\n  set source (value) {\r\n    this.METADATA.source = value\r\n  }\r\n\r\n  get valid () {\r\n    if (this.METADATA.start !== null && this.METADATA.end !== null && this.METADATA.duration !== null) {\r\n      NGN.WARN(`Interval ${this.toString()} contains a start date, end date, and duration. Only two of these may be present in a valid ISO 8601 interval.`)\r\n      return false\r\n    }\r\n\r\n    if (this.METADATA.start !== null && this.METADATA.end !== null && this.METADATA.start.getTime() === this.METADATA.end.getTime()) {\r\n      NGN.WARN(`Interval ${this.toString()} is invalid because the start and end dates are the same.`)\r\n      return false\r\n    }\r\n\r\n    if ((this.METADATA.years + this.METADATA.months + this.METADATA.weeks + this.METADATA.days + this.METADATA.hours + this.METADATA.minutes + this.METADATA.seconds) === 0 && this.METADATA.start === null && this.METADATA.end === null) {\r\n      NGN.WARN(`Interval \"${this.toString()}\" is invalid because all time periods are zero. To fix, specify at least one of the following values: years, months, weeks, days, hours, minutes, or seconds.`)\r\n      return false\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  get repeating () {\r\n    return this.METADATA.intervalCount === Infinity || this.METADATA.intervalCount !== 0\r\n  }\r\n\r\n  get duration () {\r\n    return this.METADATA.duration ? this.METADATA.duration.toString() : null\r\n  }\r\n\r\n  get years () {\r\n    return NGN.coalesce(this.METADATA.duration, { years: 0 }).years\r\n  }\r\n\r\n  set years (value) {\r\n    if (this.METADATA.duration === null) {\r\n      this.METADATA.duration = new Duration()\r\n    }\r\n\r\n    this.METADATA.duration.years = value\r\n  }\r\n\r\n  get months () {\r\n    return NGN.coalesce(this.METADATA.duration, { months: 0 }).months\r\n  }\r\n\r\n  set months (value) {\r\n    if (this.METADATA.duration === null) {\r\n      this.METADATA.duration = new Duration()\r\n    }\r\n\r\n    this.METADATA.duration.months = value\r\n  }\r\n\r\n  get weeks () {\r\n    return NGN.coalesce(this.METADATA.duration, { weeks: 0 }).weeks\r\n  }\r\n\r\n  set weeks (value) {\r\n    if (this.METADATA.duration === null) {\r\n      this.METADATA.duration = new Duration()\r\n    }\r\n\r\n    this.METADATA.duration.weeks = value\r\n  }\r\n\r\n  get days () {\r\n    return NGN.coalesce(this.METADATA.duration, { days: 0 }).days\r\n  }\r\n\r\n  set days (value) {\r\n    if (this.METADATA.duration === null) {\r\n      this.METADATA.duration = new Duration()\r\n    }\r\n\r\n    this.METADATA.duration.days = value\r\n  }\r\n\r\n  get hours () {\r\n    return NGN.coalesce(this.METADATA.duration, { hours: 0 }).hours\r\n  }\r\n\r\n  set hours (value) {\r\n    if (this.METADATA.duration === null) {\r\n      this.METADATA.duration = new Duration()\r\n    }\r\n\r\n    this.METADATA.duration.hours = value\r\n  }\r\n\r\n  get minutes () {\r\n    return NGN.coalesce(this.METADATA.duration, { minutes: 0 }).minutes\r\n  }\r\n\r\n  set minutes (value) {\r\n    if (this.METADATA.duration === null) {\r\n      this.METADATA.duration = new Duration()\r\n    }\r\n\r\n    this.METADATA.duration.minutes = value\r\n  }\r\n\r\n  get seconds () {\r\n    return NGN.coalesce(this.METADATA.duration, { seconds: 0 }).seconds\r\n  }\r\n\r\n  set seconds (value) {\r\n    if (this.METADATA.duration === null) {\r\n      this.METADATA.duration = new Duration()\r\n    }\r\n\r\n    this.METADATA.duration.seconds = value\r\n  }\r\n\r\n  get start () {\r\n    return this.METADATA.start\r\n  }\r\n\r\n  set start (value) {\r\n    this.METADATA.start = value\r\n  }\r\n\r\n  get end () {\r\n    return this.METADATA.end\r\n  }\r\n\r\n  set end (value) {\r\n    this.METADATA.end = value\r\n  }\r\n\r\n  get timezone () {\r\n    return this.METADATA.timezone\r\n  }\r\n\r\n  set timezone (value) {\r\n    this.METADATA.timezone = value\r\n  }\r\n\r\n  get intervalCount () {\r\n    return this.METADATA.intervalCount\r\n  }\r\n\r\n  set intervalCount (value) {\r\n    this.METADATA.intervalCount = value\r\n  }\r\n\r\n  /**\r\n   * The order determines whether the interval\r\n   * counts forward in time (ASC/ascending order) or\r\n   * backwards (DESC/descending).\r\n   * @return {string}\r\n   * Returns either `ASC` or `DESC`.\r\n   */\r\n  get order () {\r\n    if (this.METADATA.start !== null && this.METADATA.end !== null) {\r\n      return this.METADATA.start < this.METADATA.end ? 'ASC' : 'DESC'\r\n    }\r\n\r\n    return this.METADATA.start !== null ? 'ASC' : 'DESC'\r\n  }\r\n\r\n  get JSON () {\r\n    return {\r\n      source: this.toString(),\r\n      years: this.years,\r\n      months: this.months,\r\n      weeks: this.weeks,\r\n      days: this.days,\r\n      hours: this.hours,\r\n      minutes: this.minutes,\r\n      seconds: this.seconds,\r\n      timezone: this.METADATA.timezone,\r\n      duration: this.duration,\r\n      start: this.METADATA.start,\r\n      end: this.METADATA.end,\r\n      repeating: this.repeating,\r\n      intervalCount: this.METADATA.intervalCount,\r\n      valid: this.valid\r\n    }\r\n  }\r\n\r\n  get lastPeriod () {\r\n    return 'COMPLETE ME'\r\n  }\r\n\r\n  toString () {\r\n    let str = []\r\n\r\n    // Identify repeating interval\r\n    if (this.repeating) {\r\n      str[0] = 'R'\r\n      if (this.METADATA.intervalCount !== Infinity && typeof this.METADATA.intervalCount === 'number' && this.METADATA.intervalCount > 0) {\r\n        str[0] += this.METADATA.intervalCount\r\n      }\r\n    }\r\n\r\n    if (this.METADATA.start !== null && (this.METADATA.end === null || this.METADATA.duration === null)) {\r\n      str.push(this.METADATA.start.toISOString().split('.')[0] + NGN.coalesce(this.METADATA.timezone, 'Z'))\r\n    }\r\n\r\n    if (this.METADATA.duration !== null) {\r\n      str.push(this.METADATA.duration.toString())\r\n    }\r\n\r\n    if (this.METADATA.end !== null && (this.METADATA.start === null || this.METADATA.duration === null)) {\r\n      str.push(this.METADATA.end.toISOString().split('.')[0] + NGN.coalesce(this.METADATA.timezone, 'Z'))\r\n    }\r\n\r\n    return str.join('/')\r\n  }\r\n}\r\n","/**\r\n * @class NGNX.DATE.Iterator\r\n * A special iterator that will generate dates based on a pattern.\r\n * This acts more like a doubly linked list, allowing `next` and\r\n * `previous` iterations.\r\n */\r\nexport default class DateIterator {\r\n  constructor (pattern) {\r\n    console.log(pattern, 'pattern example')\r\n    let interval = NGN.privateconst(NGNX.DATE.parseInterval(pattern, false))\r\n\r\n    Object.defineProperties(this, {\r\n      pattern: NGN.const(pattern),\r\n      interval,\r\n      currentDate: NGN.private(null),\r\n      totalIntervals: NGN.private(0),\r\n      maxIntervals: NGN.private(0)\r\n    })\r\n\r\n    if (!this.interval.valid) {\r\n      throw new Error('Invalid ISO-8601 syntax.')\r\n    }\r\n\r\n    if (NGN.typeof(this.interval.start) !== 'date') {\r\n      throw new Error('Invalid start date.')\r\n    }\r\n\r\n    if (isNaN(this.maxIntervals)) {\r\n      throw new Error('Invalid maximum intervals.')\r\n    }\r\n\r\n    this.currentDate = this.interval.start\r\n    this.maxIntervals = NGN.coalesce(this.interval.intervalCount, -1)\r\n  }\r\n\r\n  /**\r\n   * @property {Date} date\r\n   * The date is used to calculate new iterations.\r\n   */\r\n  set date (date) {\r\n    if (NGN.typeof(date) !== 'date') {\r\n      throw new Error('Invalid date.')\r\n    }\r\n\r\n    this.currentDate = date\r\n  }\r\n\r\n  get date () {\r\n    return this.currentDate\r\n  }\r\n\r\n  /**\r\n   * Retrieves the next date.\r\n   * @param  {number} [count=null]\r\n   * By specifying a number, the iterator will run repeatedly for the\r\n   * specified number of times. The result will be an array containing\r\n   * each date in the iteration.\r\n   * @return {Date|Array}\r\n   * If `count` is unspecified, a date is returned. If `count` is specified,\r\n   * an array of dates is returned.\r\n   */\r\n  next (count = null) {\r\n    if (!isNaN(count) && count !== 0) {\r\n      if (count < 0) {\r\n        return this.previous(Math.abs(count))\r\n      }\r\n\r\n      let diff = this.maxIntervals - this.totalIntervals\r\n      if (diff <= 0) {\r\n        return []\r\n      }\r\n\r\n      count = diff < count ? diff : count\r\n\r\n      let result = []\r\n      for (let i = 0; i < count; i++) {\r\n        result.push(this.next())\r\n      }\r\n\r\n      return result\r\n    }\r\n\r\n    if (this.maxIntervals >= 0 && this.totalIntervals > this.maxIntervals) {\r\n      NGN.WARN(`Maximum interval threshhold exceeded (${this.maxIntervals}).`)\r\n      return this.currentDate\r\n    }\r\n\r\n    this.totalIntervals++\r\n    this.currentDate = NGNX.DATE.addDuration(this.currentDate, this.interval)\r\n\r\n    return this.currentDate\r\n  }\r\n\r\n  /**\r\n   * Retrieves the previous date.\r\n   * @param  {number} [count=null]\r\n   * By specifying a number, the iterator will run repeatedly for the\r\n   * specified number of times. The result will be an array containing\r\n   * each date in the iteration.\r\n   * @return {Date|Array}\r\n   * If `count` is unspecified, a date is returned. If `count` is specified,\r\n   * an array of dates is returned.\r\n   */\r\n  previous (count) {\r\n    if (!isNaN(count) && count !== 0) {\r\n      if (count < 0) {\r\n        return this.next(Math.abs(count))\r\n      }\r\n\r\n      let diff = this.maxIntervals - this.totalIntervals\r\n      if (diff <= 0) {\r\n        return []\r\n      }\r\n\r\n      count = diff < count ? diff : count\r\n\r\n      let result = []\r\n      for (let i = 0; i < count; i++) {\r\n        result.push(this.previous())\r\n      }\r\n\r\n      return result\r\n    }\r\n\r\n    if (this.maxIntervals >= 0 && this.totalIntervals === 0) {\r\n      NGN.WARN('No prior itervals available.')\r\n      return this.currentDate\r\n    }\r\n\r\n    this.totalIntervals--\r\n    this.currentDate = NGNX.DATE.subtractDuration(this.currentDate, this.interval)\r\n    return this.currentDate\r\n  }\r\n\r\n  /**\r\n   * Reset the iterator to it's original state.\r\n   */\r\n  reset () {\r\n    this.currentDate = this.interval.start\r\n    this.totalIntervals = 0\r\n  }\r\n}\r\n","import Duration from './Duration'\r\nimport Interval from './Interval'\r\nimport Iterator from './Iterator'\r\n\r\n/**\r\n * @class NGNX.DATE\r\n * A utility library for date and time manipulation.\r\n * @fires locale.modified\r\n * Triggered when the locale has changed. An object containing `new` and `old`\r\n * keys identifies the new and old locale.\r\n * @todo Add a fiscal calendar generator\r\n * @todo Add 5/4/4 pattern to quarters (and other valid calendar patterns)\r\n * @todo Add ability to reverse recurrence pattern (count back from origin date instead of forward from origin date.)\r\n */\r\nexport default class DateTime extends NGN.EventEmitter {\r\n  constructor () {\r\n    super(...arguments)\r\n\r\n    // Identify the date separator by browser\r\n    let DateSeparator = '-'\r\n\r\n    try {\r\n      let dt = new Date('01-01-3500 00:00:00')\r\n\r\n      if (dt.indexOf('Invalid')) {\r\n        DateSeparator = '/'\r\n      } else {\r\n        // This will fail in some browsers using slash-based syntax.\r\n        dt = dt.getTime()\r\n      }\r\n    } catch (e) {\r\n      DateSeparator = '/'\r\n    }\r\n\r\n    Object.defineProperties(this, {\r\n      Iterator: NGN.const(Iterator),\r\n      Duration: NGN.const(Duration),\r\n      Interval: NGN.const(Interval),\r\n\r\n      METADATA: NGN.privateconst({\r\n        // locale: NGN.coalesce(NGN.global.navigator.language, 'en-US'),\r\n        locale: 'en-US',\r\n\r\n        separator: DateSeparator,\r\n\r\n        getDayNames: (locale) => {\r\n          let date = new Date(Date.UTC(2017, 0, 2)) // A Monday\r\n          let names = []\r\n\r\n          for (let i = 0; i < 7; i++) {\r\n            names.push(date.toLocaleDateString(NGN.coalesce(locale, this.METADATA.locale), { weekday: 'long' }))\r\n            date.setDate(date.getDate() + 1)\r\n          }\r\n\r\n          return names\r\n        },\r\n\r\n        getMonthNames: (locale) => {\r\n          let date = new Date(Date.UTC(2017, 0, 2)) // A Monday\r\n          let names = []\r\n\r\n          for (let i = 0; i < 12; i++) {\r\n            names.push(date.toLocaleDateString(NGN.coalesce(locale, this.METADATA.locale), { month: 'long' }))\r\n            date.setMonth(date.getMonth() + 1)\r\n          }\r\n\r\n          return names\r\n        },\r\n\r\n        changeDuration: (date, period, add = true) => {\r\n          let duration = period\r\n\r\n          if (typeof period === 'string') {\r\n            duration = this.parseDuration(period)\r\n\r\n            if (!duration.valid) {\r\n              throw new Error(`${period} is an invalid duration.`)\r\n            }\r\n          }\r\n\r\n          let interval = (\r\n            // Do not include years by millisecond to account for leap years.\r\n            // (duration.years * this.METADATA.YEAR) +\r\n            (duration.weeks * this.METADATA.WEEK) +\r\n            (duration.days * this.METADATA.DAY) +\r\n            (duration.hours * this.METADATA.HOUR) +\r\n            (duration.minutes * this.METADATA.MINUTE) +\r\n            (duration.seconds * this.METADATA.SECOND)\r\n          )\r\n\r\n          // Forcibly guarantee a month attribute exists.\r\n          if (!duration.hasOwnProperty('months')) {\r\n            duration.months = 0\r\n          }\r\n\r\n          let newdate\r\n          if (add) {\r\n            newdate = this.addMonth(this.addMillisecond(this.addYear(date, duration.years || 0), interval), duration.months)\r\n          } else {\r\n            newdate = this.addMonth(this.addMillisecond(this.addYear(date, 0 - (duration.years || 0)), 0 - interval), 0 - duration.months)\r\n          }\r\n\r\n          return newdate\r\n        },\r\n\r\n        SECOND: 1000,\r\n        MINUTE: 60000,\r\n        HOUR: 3600000,\r\n        DAY: 86400000,\r\n        WEEK: 604800000,\r\n        YEAR: 31536000000,\r\n\r\n        PATTERN: {\r\n          // Rn/PnYnMnDTnHnMnS\r\n          ISO8601R: /^R(\\d*){0,10}\\/(\\d{4}(?:-\\d{2}){2})T(\\d{2}(?::\\d{2}){2}(?:\\.\\d*)?([A-Za-z]*)?)\\/(P(?=.)(?:\\d+Y)?(?:\\d+M)?(?:\\d+D)?(?:T(?=.)(?:\\d+H)?(?:\\d+M)?(?:\\d+S)?)?)$/,\r\n          // PnYnMnDTnHnMnS\r\n          ISO8601P: /^P((\\d*)Y)?((\\d*)M)?((\\d*)W)?((\\d*)D)?T?((\\d*)H)?((\\d*)M)?((\\d*)S)?$/\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  get locale () {\r\n    return this.METADATA.locale\r\n  }\r\n\r\n  set locale (value) {\r\n    if (value !== this.METADATA.locale) {\r\n      let old = this.METADATA.locale\r\n\r\n      this.METADATA.locale = value\r\n\r\n      this.emit('locale.modified', {\r\n        old,\r\n        new: value\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @property {string} currentTime\r\n   * The current time in a string format.\r\n   */\r\n  get currentTime () {\r\n    let dt = (new Date()).toLocaleTimeString()\r\n    dt = dt.split(':')\r\n\r\n    return `${dt[0]}:${dt[1]} ${dt.pop().replace(/[^A-Z]/gi, '')}`\r\n  }\r\n\r\n  /**\r\n   * @property {Number} localOffset\r\n   * The local timezone offset represented in milliseconds.\r\n   */\r\n  get localOffset () {\r\n    return (new Date().getTimezoneOffset()) * 60 * 1000\r\n  }\r\n\r\n  /**\r\n   * @property {string} localTimezoneAbbreviation\r\n   * The local timezone abbreviation, such as `CST`, `EST`, `GMT`.\r\n   */\r\n  get localTimezoneAbbreviation () {\r\n    return this.timezoneAbbreviation(new Date())\r\n  }\r\n\r\n  /**\r\n   * @property {string} localTimezone\r\n   * The local timezone, such as `America/Chicago`.\r\n   */\r\n  get localTimezone () {\r\n    return Intl.DateTimeFormat().resolvedOptions().timeZone\r\n  }\r\n\r\n  get now () {\r\n    return new Date()\r\n  }\r\n\r\n  /**\r\n   * Retrieve the timezone abbreviation of the date, such as `CST`, `EST`, etc.\r\n   * @param  {Date} date\r\n   * The date to extract the timezone from.\r\n   * @return {string}\r\n   */\r\n  timezoneAbbreviation (date) {\r\n    date = date + ''\r\n\r\n    let abbr = NGN.coalesce(date.match(/\\(([^]+)\\)$/), date.match(/([A-Z]+) [\\d]{4}$/))\r\n\r\n    if (abbr[1]) {\r\n      abbr = abbr[1].match(/[A-Z]/g).join('')\r\n    } else if (/(GMT\\W*\\d{4})/.test(date)) {\r\n      return RegExp.$1\r\n    }\r\n\r\n    return abbr\r\n  }\r\n\r\n  /**\r\n   * Format time by hours and minutes (ex: 3:45 AM)\r\n   * @param  {Date} date\r\n   * The date to format.\r\n   * @return {String}\r\n   */\r\n  formatTime (date) {\r\n    const inputDate = new Date(date.getTime())\r\n\r\n    let time = inputDate.toLocaleTimeString()\r\n    let tt = time.split(/\\s/).pop()\r\n\r\n    time = time.split(/\\s/)[0].split(':')\r\n\r\n    time.pop()\r\n\r\n    return `${time.join(':')} ${tt}`\r\n  }\r\n\r\n  /**\r\n   * Add milliseconds to a date (supports negative values for substraction)\r\n   * @param {Date} date\r\n   * @param {Number} milliseconds\r\n   * The number of milliseconds to add to the date.\r\n   * @return {Date}\r\n   */\r\n  addMillisecond (date, milliseconds) {\r\n    return new Date(date.getTime() + milliseconds)\r\n  }\r\n\r\n  /**\r\n   * Add seconds to a date (supports negative values for substraction)\r\n   * @param {Date} date\r\n   * @param {Number} seconds\r\n   * The number of seconds to add to the date.\r\n   * @return {Date}\r\n   */\r\n  addSecond (date, seconds) {\r\n    return new Date(date.getTime() + (seconds * this.METADATA.SECOND))\r\n  }\r\n\r\n  /**\r\n   * Add minutes to a date (supports negative values for substraction)\r\n   * @param {Date} date\r\n   * @param {Number} minutes\r\n   * The number of minutes to add to the date.\r\n   * @return {Date}\r\n   */\r\n  addMinute (date, minutes) {\r\n    return new Date(date.getTime() + (minutes * this.METADATA.MINUTE))\r\n  }\r\n\r\n  /**\r\n   * Add hours to a date (supports negative values for subtraction).\r\n   * @param {Date} date\r\n   * @param {Number} hours\r\n   * The number of hours to add to the date.\r\n   * @return {Date}\r\n   */\r\n  addHour (date, hours) {\r\n    return new Date(date.getTime() + (hours * this.METADATA.HOUR))\r\n  }\r\n\r\n  /**\r\n   * Add day(s) to a date (supports negative values for substraction).\r\n   * @param {Date} date\r\n   * @param {Number} days\r\n   * The number of days to add to the date.\r\n   * @return {Date}\r\n   */\r\n  addDay (date, days) {\r\n    return new Date(date.getTime() + (days * this.METADATA.DAY))\r\n  }\r\n\r\n  /**\r\n   * Add week(s) to a date (supports negative values for substraction).\r\n   * @param {Date} date\r\n   * @param {Number} weeks\r\n   * The number of weeks to add to the date.\r\n   * @return {Date}\r\n   */\r\n  addWeek (date, weeks) {\r\n    return new Date(date.getTime() + (weeks * this.METADATA.WEEK))\r\n  }\r\n\r\n  /**\r\n   * Add month(s) to a date (supports negative values for substraction).\r\n   * @param {Date} date\r\n   * @param {Number} months\r\n   * The number of months to add to the date.\r\n   * @return {Date}\r\n   */\r\n  addMonth (date, months) {\r\n    const inputDate = new Date(date.getTime())\r\n\r\n    if (months === 0) {\r\n      return inputDate\r\n    }\r\n\r\n    let workingDate = this.firstOfMonth(date)\r\n    let diff = this.diffMinutes(workingDate, inputDate)\r\n\r\n    // If the total adjustment is over a year, update the working\r\n    // date by the specified number of years and reduce the month count\r\n    // to a number between 1-12 (or -1 to -12).\r\n    if (months >= 12) {\r\n      workingDate = this.addYear(workingDate, Math.floor(months / 12))\r\n    } else if (months <= -12) {\r\n      workingDate = this.addYear(workingDate, Math.ceil(months / 12))\r\n    }\r\n\r\n    // Strip years\r\n    months = months % 12\r\n    // If there are still months to add/remove, apply the appropriate adjustment.\r\n    if (months > 0) {\r\n      workingDate.setUTCMonth(workingDate.getUTCMonth() + months)\r\n    } else if (months < 0) {\r\n      months = Math.abs(months) // Convert to a positive number to make the math easy.\r\n\r\n      let workingMonth = (workingDate.getUTCMonth() + 1) // Get the active working month on a 1-12 scale.\r\n\r\n      if (months > workingMonth) {\r\n        // If the number of months to subtract are greater than the current\r\n        // working month, the date will fall in the prior year.\r\n        workingDate = this.addYear(workingDate, -1)\r\n        months = 12 - months\r\n\r\n        workingDate.setUTCMonth(workingDate.getUTCMonth() + months)\r\n      } else {\r\n        // If the number of months to subtract is less than the current\r\n        // working month, the date will fall earlier in the same year.\r\n        months = workingMonth - months\r\n\r\n        workingDate.setUTCMonth(months - 1)\r\n      }\r\n    }\r\n\r\n    return diff !== 0 ? this.addMinute(workingDate, diff) : workingDate\r\n  }\r\n\r\n  /**\r\n   * Add year(s) to a date (supports negative values for substraction).\r\n   * @param {Date} date\r\n   * @param {Number} years\r\n   * The number of years to add to the date.\r\n   * @return {Date}\r\n   */\r\n  addYear (date, years) {\r\n    let newdate = new Date(date.getTime())\r\n    newdate.setFullYear(newdate.getFullYear() + years)\r\n\r\n    return newdate\r\n  }\r\n\r\n  /**\r\n   * Add a [ISO-8601:2004 duration interval](https://en.wikipedia.org/wiki/ISO_8601#Durations)\r\n   * to a date.\r\n   * @param {Date} date\r\n   * The date to apply the interval to.\r\n   * @param {string|object} duration\r\n   * This can be the ISO-8601:2004 period pattern (PnYnMnDTnHnMnS or PnW) or\r\n   * an object containing the following attributes:\r\n   *\r\n   * ```\r\n   * {\r\n   *   years: 0,\r\n   *   months: 0,\r\n   *   weeks: 0,\r\n   *   days: 0,\r\n   *   hours: 0,\r\n   *   minutes: 0,\r\n   *   seconds: 0\r\n   * }\r\n   * ```\r\n   *\r\n   * Using an object is *more efficient* since the duration parser does not\r\n   * need to be invoked.\r\n   * @return {Date}\r\n   * Returns the new date after the duration has been applied (added).\r\n   */\r\n  addDuration (date, period) {\r\n    return this.METADATA.changeDuration(date, period)\r\n  }\r\n\r\n  /**\r\n   * Subtract a [ISO-8601:2004 duration interval](https://en.wikipedia.org/wiki/ISO_8601#Durations)\r\n   * from a date.\r\n   * @param {Date} date\r\n   * The date to apply the interval to.\r\n   * @param {string|object} duration\r\n   * This can be the ISO-8601:2004 period pattern (PnYnMnDTnHnMnS or PnW) or\r\n   * an object containing the following attributes:\r\n   *\r\n   * ```\r\n   * {\r\n   *   years: 0,\r\n   *   months: 0,\r\n   *   weeks: 0,\r\n   *   days: 0,\r\n   *   hours: 0,\r\n   *   minutes: 0,\r\n   *   seconds: 0\r\n   * }\r\n   * ```\r\n   *\r\n   * Using an object is *more efficient* since the duration parser does not\r\n   * need to be invoked.\r\n   * @return {Date}\r\n   * Returns the new date after the duration has been applied (subtracted).\r\n   */\r\n  subtractDuration (date, period) {\r\n    return this.METADATA.changeDuration(date, period, false)\r\n  }\r\n\r\n  /**\r\n   * Calculates the number of milliseconds between two dates (from start to end).\r\n   * The result will be the number of milliseconds that, when added to the start\r\n   * date, equal the end date. If the start date is after the end date, this\r\n   * will be a negative number.\r\n   * @param  {Date} start\r\n   * @param  {Date} end\r\n   * @return {Number}\r\n   * The total number of milliseconds from the start date to the end date.\r\n   */\r\n  diff (start, end) {\r\n    return (end.getTime() - start.getTime())\r\n  }\r\n\r\n  /**\r\n   * Calculates the number of minutes between two dates (from start to end).\r\n   * The result will be the number of minutes that, when added to the start\r\n   * date, equal the end date. If the start date is after the end date, this\r\n   * will be a negative number.\r\n   * @param  {Date} start\r\n   * @param  {Date} end\r\n   * @return {Number}\r\n   * The total number of minutes from the start date to the end date.\r\n   */\r\n  diffMinutes (start, end) {\r\n    return (end.getTime() - start.getTime()) / this.METADATA.MINUTE\r\n  }\r\n\r\n  /**\r\n   * Calculates the number of hours between two dates (from start to end).\r\n   * The result will be the number of hours that, when added to the start\r\n   * date, equal the end date. If the start date is after the end date, this\r\n   * will be a negative number.\r\n   * @param  {Date} start\r\n   * @param  {Date} end\r\n   * @return {Number}\r\n   * The total number of hours from the start date to the end date.\r\n   */\r\n  diffHours (start, end) {\r\n    return (end.getTime() - start.getTime()) / this.METADATA.HOUR\r\n  }\r\n\r\n  /**\r\n   * Calculates the number of days between two dates (from start to end).\r\n   * The result will be the number of days that, when added to the start\r\n   * date, equal the end date. If the start date is after the end date, this\r\n   * will be a negative number.\r\n   * @param  {Date} start\r\n   * @param  {Date} end\r\n   * @return {Number}\r\n   * The total number of days from the start date to the end date.\r\n   */\r\n  diffDays (start, end) {\r\n    return (end.getTime() - start.getTime()) / this.METADATA.DAY\r\n  }\r\n\r\n  /**\r\n   * Calculates the number of weeks between two dates (from start to end).\r\n   * The result will be the number of weeks that, when added to the start\r\n   * date, equal the end date. If the start date is after the end date, this\r\n   * will be a negative number.\r\n   * @param  {Date} start\r\n   * @param  {Date} end\r\n   * @return {Number}\r\n   * The total number of weeks from the start date to the end date.\r\n   */\r\n  diffWeeks (start, end) {\r\n    return (end.getTime() - start.getTime()) / this.METADATA.WEEK\r\n  }\r\n\r\n  /**\r\n   * Rounds a time to the next nearest minute increment.\r\n   * For example, 6:07 PM would be rounded up to 6:15 PM,\r\n   * 5:57 AM would be rounded up to 6:00 AM.\r\n   * @param {Date} datetime\r\n   * The date time to round.\r\n   * @param {Array} [minutes=[0, 15, 30, 45]]\r\n   * An optional parameter to specify the minute to round up to.\r\n   * @return {Date}\r\n   * Returns the updated date object.\r\n   */\r\n  nearestMinute (datetime, minutes = [0, 15, 30, 45]) {\r\n    let minute = datetime.getMinutes()\r\n\r\n    if (minutes.indexOf(minute) >= 0) {\r\n      return datetime\r\n    }\r\n\r\n    while (minute > minutes[0]) {\r\n      minutes.shift()\r\n    }\r\n\r\n    let diff\r\n\r\n    if (minutes.length === 0) {\r\n      diff = 60 - minute\r\n    } else {\r\n      diff = minutes[0] - minute\r\n    }\r\n\r\n    return this.addMinute(datetime, diff)\r\n  }\r\n\r\n  /**\r\n   * Get the full name of a day by day number. Specify the locale to change\r\n   * the language.\r\n   * @param {number} dayNumber\r\n   * The day of the week (1 = Sunday, 7 = Saturday).\r\n   * @param {string} locale\r\n   * Specify the locale. If unspecified, an attempt will be made to auto-determine\r\n   * the locale.\r\n   */\r\n  dayName (index, locale) {\r\n    if (typeof index !== 'number') {\r\n      index = index.getUTCDay()\r\n    } else {\r\n      index -= 1\r\n    }\r\n\r\n    locale = NGN.coalesce(locale, this.METADATA.locale)\r\n\r\n    if (!this.METADATA.CACHE_DAYNAME || !this.METADATA.CACHE_DAYNAME[locale]) {\r\n      this.METADATA.CACHE_DAYNAME = NGN.coalesce(this.METADATA.CACHE_DAYNAME, {})\r\n      this.METADATA.CACHE_DAYNAME[locale] = this.METADATA.getDayNames(locale)\r\n    }\r\n\r\n    // console.log(this.METADATA.CACHE_DAYNAME)\r\n    return this.METADATA.CACHE_DAYNAME[locale][index]\r\n  }\r\n\r\n  /**\r\n   * Get the full name of the month by month number. Specify the locale to change\r\n   * the language.\r\n   * @param {number} monthNumber\r\n   * The month of year (1 = January, 12 = December).\r\n   * @param {string} locale\r\n   * Specify the locale. If unspecified, an attempt will be made to auto-determine\r\n   * the locale.\r\n   */\r\n  monthName (index, locale) {\r\n    if (typeof index !== 'number') {\r\n      index = index.getUTCMonth()\r\n    } else {\r\n      index -= 1\r\n    }\r\n\r\n    if (!this.METADATA.CACHE_MONTHNAME || !this.METADATA.CACHE_MONTHNAME[locale]) {\r\n      this.METADATA.CACHE_MONTHNAME = NGN.coalesce(this.METADATA.CACHE_MONTHNAME, {})\r\n      this.METADATA.CACHE_MONTHNAME[locale] = this.METADATA.getMonthNames(locale)\r\n    }\r\n\r\n    return this.METADATA.CACHE_MONTHNAME[locale][index]\r\n  }\r\n\r\n  /**\r\n   * Formats the date as `yyyy/mm/dd`, which is compatible with the HTML date\r\n   * input element.\r\n   * @param {Date} date\r\n   */\r\n  dateInputFormat (date) {\r\n    let yr = date.getFullYear()\r\n    let mo = date.getMonth() + 1\r\n    let day = date.getDate()\r\n\r\n    if (mo < 10) {\r\n      mo = `0${mo}`\r\n    }\r\n\r\n    if (day < 10) {\r\n      day = `0${day}`\r\n    }\r\n\r\n    return `${yr}-${mo}-${day}`\r\n  }\r\n\r\n  /**\r\n   * Converts a string input date `yyyy/mm/dd` to a valid JS date.\r\n   * @param {String} date\r\n   */\r\n  inputDate (date) {\r\n    if (date instanceof Date) {\r\n      return date\r\n    }\r\n\r\n    date = date.split(/\\/|-/)\r\n\r\n    return new Date(date[0], date[1], date[2], 0, 0, 0, 0)\r\n  }\r\n\r\n  /**\r\n   * Determines if a date is \"today\".\r\n   * @param  {Date} date\r\n   * @return {Boolean}\r\n   */\r\n  today (date) {\r\n    let now = new Date()\r\n\r\n    return date.getUTCDate() === now.getUTCDate() &&\r\n      date.getUTCMonth() === now.getUTCMonth() &&\r\n      date.getUTCFullYear() === now.getUTCFullYear()\r\n  }\r\n\r\n  /**\r\n   * @method intersection\r\n   * Determines whether two time ranges overlap each other.\r\n   *\r\n   * ```\r\n   *   First Range\r\n*        |------=== |\r\n   *        Second Range\r\n   *        | === ------|\r\n   * ```\r\n   *\r\n   * This method attempts to determine if two time ranges overlap.\r\n   * @param  {date}  firstRangeStart\r\n   * The start of the first range.\r\n   * @param  {date}  firstRangeEnd\r\n   * The end of the first range.\r\n   * @param  {date}  secondRangeStart\r\n   * The start of the second range.\r\n   * @param  {date}  secondRangeEnd\r\n   * The end of the second range.\r\n   * @return {array}\r\n   * Returns the overlapping range (intersection of two ranges).\r\n   * If there is no overlap, the array is empty.\r\n   */\r\n  intersection (starta, enda, startb, endb) {\r\n    // The ranges are the same\r\n    if (starta.getTime() === startb.getTime() && enda.getTime() === endb.getTime()) {\r\n      return [starta, endb]\r\n    }\r\n\r\n    // No overlap\r\n    if (enda < startb || starta > endb) {\r\n      return []\r\n    }\r\n\r\n    // Determine overlap\r\n\r\n    // The second range is entirely within the first\r\n    if (starta < startb && enda > endb) {\r\n      return [startb, endb]\r\n    }\r\n\r\n    // The first range is entirely within the second\r\n    if (startb < starta && endb > enda) {\r\n      return [starta, enda]\r\n    }\r\n\r\n    // The first range begins before the second\r\n    if (starta < startb) {\r\n      return [startb, enda]\r\n    }\r\n\r\n    // The first range begins after the second\r\n    return [starta, endb]\r\n  }\r\n\r\n  /**\r\n   * Generate the last moment of the month.\r\n   * This is specific to the locale/timezone offset (i.e. NOT UTC).\r\n   *\r\n   * For example, `lastOfMonth(new Date(2017, 1, 17))` returns January 31, 2017\r\n   * 11:59:59 PM (999 milliseconds).\r\n   * @param  {Date} date\r\n   * @return {Date}\r\n   */\r\n  lastOfMonth (date = null) {\r\n    let newdate = new Date(NGN.coalesce(date, new Date()).getTime())\r\n    newdate = new Date(newdate.getFullYear(), newdate.getMonth() + 1, 0)\r\n\r\n    return this.lastMoment(newdate)\r\n  }\r\n\r\n  /**\r\n   * Return the last moment of the day (11:59:59 PM).\r\n   *\r\n   * For example, `lastOfMonth(new Date(2017, 1, 17))` returns January 1, 2017\r\n   * 12:00:00 AM.\r\n   * @param  {Date} date\r\n   * @return {Date}\r\n   */\r\n  lastMoment (date) {\r\n    let newdate = new Date(NGN.coalesce(date, new Date()).getTime())\r\n    newdate.setUTCHours(23)\r\n    newdate.setUTCMinutes(59)\r\n    newdate.setUTCSeconds(59)\r\n    newdate.setUTCMilliseconds(999)\r\n\r\n    return newdate\r\n  }\r\n\r\n  /**\r\n   * Returns a date set to the first moment of the month.\r\n   * This is specific to the locale/timezone offset (i.e. NOT UTC).\r\n   * @param  {[type]} date\r\n   * @return {Date}\r\n   */\r\n  firstOfMonth (date = null) {\r\n    let newdate = new Date(NGN.coalesce(date, new Date()).getTime())\r\n    newdate.setUTCDate(1)\r\n    newdate = this.firstMoment(newdate)\r\n\r\n    return newdate\r\n  }\r\n\r\n  /**\r\n   * Return the first moment of the day (12:00:00 AM).\r\n   * @param  {Date} date\r\n   * @return {Date}\r\n   */\r\n  firstMoment (date) {\r\n    let newdate = new Date((NGN.coalesce(date, new Date())).getTime())\r\n    newdate.setUTCHours(0)\r\n    newdate.setUTCMinutes(0)\r\n    newdate.setUTCSeconds(0)\r\n    newdate.setUTCMilliseconds(0)\r\n\r\n    return newdate\r\n  }\r\n\r\n  /**\r\n   * Convert standard time (12hr) to military time (24hr).\r\n   * @param  {string} time\r\n   * @return {string}\r\n   */\r\n  convertStandardToMilitaryTime (time) {\r\n    if (!time || time.trim().length === 0) {\r\n      return '00:00:00'\r\n    }\r\n\r\n    time = time.split(' ')\r\n\r\n    let tt = time.pop()\r\n    tt = tt.replace(/[^A-Za-z]/gi, '').toUpperCase()\r\n\r\n    time = time[0].split(':')\r\n\r\n    let hours = parseInt(time[0].toString().replace(/[^0-9]/gi, ''), 10)\r\n    let min = time[1].replace(/[^0-9]/gi, '')\r\n\r\n    if (tt === 'PM' && hours < 12) {\r\n      hours = hours + 12\r\n    }\r\n\r\n    hours = hours.toString()\r\n\r\n    if (hours.length < 2) {\r\n      hours = `0${hours}`\r\n    }\r\n\r\n    return `${hours}:${min}:00`\r\n  }\r\n\r\n  /**\r\n   * Convert military to standard time.\r\n   * @param  {String} time\r\n   * The time string, such as 18:00 (returns '06:00 PM').\r\n   */\r\n  convertMilitaryToStandardTime (time) {\r\n    const input = time\r\n\r\n    time = time.split(/\\s{1,10}/)[0] // Make sure no \"AM\" or \"PM\" are provided.\r\n    time = time.split(':')\r\n\r\n    if (time.length !== 2) {\r\n      throw new Error(`Invalid military time string: ${input}`)\r\n    }\r\n\r\n    let hours = parseInt(time[0].replace(/[^0-9]/gi, ''), 10)\r\n    let minutes = parseInt(time[1].replace(/[^0-9]/gi, ''), 10)\r\n    let tt = 'AM'\r\n\r\n    if (minutes > 59 || minutes < 0 || hours < 0 || hours > 23) {\r\n      throw new Error(`Invalid military time string: ${input}`)\r\n    }\r\n\r\n    if (hours > 11) {\r\n      tt = 'PM'\r\n      hours = hours - 12\r\n    }\r\n\r\n    if (hours < 10) {\r\n      hours = `0${hours}`\r\n    }\r\n\r\n    if (minutes < 10) {\r\n      minutes = `0${minutes}`\r\n    }\r\n\r\n    return `${hours}:${minutes} ${tt}`\r\n  }\r\n\r\n  /**\r\n   * Force a clean date format (supports IE11 date formats).\r\n   * @param  {string}  date\r\n   * @param  {Boolean} [useIsoFormat=false]\r\n   * @return {date}\r\n   */\r\n  cleanDateFormat (date, useIsoFormat = false) {\r\n    if (typeof date === 'string') {\r\n      let time = date.split(' ')\r\n      date = time.shift()\r\n      date = date.replace(/\\/|\\\\/gi, '-').split(' ')\r\n      date = date[0]\r\n      date = date.split(/\\/|/)\r\n\r\n      time = time.join(' ').trim()\r\n\r\n      let yyyy = date[0].toString().replace(/[^0-9]/gi, '')\r\n      let mm = parseInt(date[1].toString().replace(/[^0-9]/gi, ''), 10)\r\n      let dd = parseInt(date[2].toString().replace(/[^0-9]/gi, ''), 10)\r\n\r\n      if (mm < 10) {\r\n        mm = `0${mm}`\r\n      }\r\n      mm = mm.toString()\r\n\r\n      if (dd < 10) {\r\n        dd = `0${dd}`\r\n      }\r\n      dd = dd.toString()\r\n\r\n      if (time.length === 0) {\r\n        return `${yyyy}${this.METADATA.separator}${mm}${this.METADATA.separator}${dd}${useIsoFormat ? 'T' : ' '}00:00:00${useIsoFormat ? 'Z' : ''}`\r\n      }\r\n\r\n      return `${yyyy}${this.METADATA.separator}${mm}${this.METADATA.separator}${dd}${useIsoFormat ? 'T' : ' '}${this.cleanTimeStringFormat(time)}${useIsoFormat ? 'Z' : ''}`\r\n    }\r\n\r\n    let hr = date.getUTCHours()\r\n    let min = date.getUTCMinutes()\r\n\r\n    return this.cleanDateStringFormat(date, `${hr}:${min}:00`)\r\n  }\r\n\r\n  /**\r\n   * Force a clean date string. Supports IE11 formats.\r\n   * @param  {string} date\r\n   * @param  {string} time\r\n   * @return {date}\r\n   */\r\n  cleanDateStringFormat (date, time) {\r\n    let yr = date.getUTCFullYear()\r\n    let mo = date.getUTCMonth() + 1\r\n    let day = date.getUTCDate()\r\n\r\n    if (mo < 10) {\r\n      mo = `0${mo}`\r\n    }\r\n\r\n    if (day < 10) {\r\n      day = `0${day}`\r\n    }\r\n\r\n    return `${yr}${this.METADATA.separator}${mo}${this.METADATA.separator}${day}T${this.cleanTimeStringFormat(time)}Z`\r\n  }\r\n\r\n  /**\r\n   * Force a clean time string. Supports IE11 formats.\r\n   * @param  {string} time\r\n   * @return {string}\r\n   */\r\n  cleanTimeStringFormat (time) {\r\n    time = time.split(' ')[0]\r\n    time = time.split(':')\r\n\r\n    let hr = parseInt(time[0].replace(/[^0-9]/gi, ''), 10)\r\n    let min = parseInt(time.length > 1 ? time[1].replace(/[^0-9]/gi, '') : 0, 10)\r\n    let sec = parseInt(time.length > 2 ? time[2].replace(/[^0-9]/gi, '') : 0, 10)\r\n\r\n    if (hr < 10) {\r\n      hr = `0${hr}`\r\n    }\r\n    hr = hr.toString()\r\n\r\n    if (min < 10) {\r\n      min = `0${min}`\r\n    }\r\n    min = min.toString()\r\n\r\n    if (sec < 10) {\r\n      sec = `0${sec}`\r\n    }\r\n    sec = sec.toString()\r\n\r\n    return `${hr}:${min}:${sec}`\r\n  }\r\n\r\n  /**\r\n   * Create a proper JS date from a date/time string.\r\n   * @param {string} date\r\n   * The date to specify the time for.\r\n   * @param {string} time\r\n   */\r\n  setTime (date, time) {\r\n    time = this.cleanTimeStringFormat(time)\r\n    time = time.split(':')\r\n\r\n    date.setHours(parseInt(time[0].replace(/[^0-9]/gi, '')))\r\n    date.setMinutes(parseInt(time[1].replace(/[^0-9]/gi, '')))\r\n    date.setSeconds(parseInt(time[2].replace(/[^0-9]/gi, '')))\r\n\r\n    return date\r\n  }\r\n\r\n  /**\r\n   * Generate a time table.\r\n   * @param  {Number} [interval=15]\r\n   * The number of minutes between each interval.\r\n   * @param  {Number} [format=12]\r\n   * 12 or 24 hour format.\r\n   * @param  {Boolean} [enforceFormat=true]\r\n   * Enforce the `0` before single digit hours.\r\n   * @return {Array}\r\n   * Returns an array of times (hh:mm tt).\r\n   */\r\n  createTimeTable (interval = 15, format = 12, enforceFormat = true) {\r\n    // Generate based on interval\r\n    let intervals = Math.ceil((24 * 60) / interval)\r\n    let hour = format === 12 ? 12 : 0\r\n    let tt = format === 12 ? 'AM' : ''\r\n    let minute = 0\r\n    let results = [\r\n      `${hour === 12 ? hour : '00'}:00 ${tt}`\r\n    ]\r\n\r\n    for (let i = 1; i < intervals; i++) {\r\n      minute += interval\r\n\r\n      let hr = Math.floor(minute / 60) + hour\r\n      let min = minute % 60\r\n\r\n      if (format === 12 && hr > 12) {\r\n        hr = hr % 12\r\n        hr = hr === 0 ? 12 : hr\r\n\r\n        if (minute / (12 * 60) >= 1) {\r\n          tt = 'PM'\r\n        }\r\n      }\r\n\r\n      if (min < 10) {\r\n        min = `0${min.toString()}`\r\n      }\r\n\r\n      if (enforceFormat && hr < 10) {\r\n        hr = `0${hr}`\r\n      }\r\n\r\n      if (tt === 'AM' || tt === 'PM') {\r\n        results.push(`${hr}:${min} ${tt}`)\r\n      } else {\r\n        results.push(`${hr}:${min}`)\r\n      }\r\n\r\n      // results.push(`${hr}:${min} ${tt}`)\r\n    }\r\n\r\n    return results\r\n  }\r\n\r\n  /**\r\n   * Determines whether the specified date falls on a weekday.\r\n   * @param  {Date} date\r\n   * @return {Boolean}\r\n   */\r\n  isWeekday (date) {\r\n    let day = date.getUTCDay()\r\n    return day > 0 && day < 6\r\n  }\r\n\r\n  /**\r\n   * Determines whether the specified date falls on a weekend.\r\n   * @param  {Date} date\r\n   * @return {Boolean}\r\n   */\r\n  isWeekend (date) {\r\n    let day = date.getUTCDay()\r\n    return day === 0 || day === 6\r\n  }\r\n\r\n  /**\r\n   * Determines whether the date falls within a leap year.\r\n   * @param  {Date} date\r\n   */\r\n  isLeapYear (date) {\r\n    let year = date.getUTCFullYear()\r\n\r\n    return ((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0)\r\n  }\r\n\r\n  /**\r\n   * Determines what quarter the date falls within. By default, a\r\n   * standard calendar year is used, starting January 1. The calendar\r\n   * month and day may be specified for a custom quarter system (such\r\n   * as a fiscal calendar).\r\n   * @param  {Date} date\r\n   * @param  {Number} [calendarYearStartMonth=1]\r\n   * The month of the year when the quarter system begins.\r\n   * @param  {Number} [calendarYearStartDay=1]\r\n   * The day of the month when the quarter system begins.\r\n   * @return {Number}\r\n   * Returns the quarter (1-4).\r\n   * @todo: Create tests for calendars that start on a different month.\r\n   * @todo: Add support for quarters using a 5/4/4 pattern (or other valid patterns)\r\n   */\r\n  quarter (date, calendarYearStartMonth = 1, calendarYearStartDay = 1) {\r\n    if (calendarYearStartMonth < 1 || calendarYearStartMonth > 12) {\r\n      throw new Error('Invalid calendar year start month. Must be 1-12.')\r\n    }\r\n\r\n    if (calendarYearStartDay < 1 || calendarYearStartDay > 31) {\r\n      throw new Error('Invalid calendar year start day. Must be 1-31 (or up to the last day of the month).')\r\n    }\r\n\r\n    let start = new Date(date.getUTCFullYear(), calendarYearStartMonth - 1, calendarYearStartDay)\r\n\r\n    while (start > date) {\r\n      start = this.addYear(start, -1)\r\n    }\r\n\r\n    let quarter = 0\r\n    while (start < date) {\r\n      quarter++\r\n      start = this.addMonth(start, 3)\r\n    }\r\n\r\n    return quarter\r\n  }\r\n\r\n  /**\r\n   * Parse an ISO-8601 [PnYnMnWnDTnHnMnS duration](https://en.wikipedia.org/wiki/ISO_8601#Durations).\r\n   * @param  {string} value\r\n   * For example, `P1Y2M10DT2H30M` indicates the duration period is 1 year, 2 months,\r\n   * 10 days, 2 hours, and 30 minutes.\r\n   * @return {object}\r\n   * Returns an object like:\r\n   * ```\r\n   * {\r\n   *   source: 'P1Y2M10DT2H30M',\r\n   *   valid: true, // Indicates input is a valid period pattern.\r\n   *   years: 1,\r\n   *   months: 2,\r\n   *   weeks: 0,\r\n   *   days: 10,\r\n   *   hours: 2,\r\n   *   minutes: 30,\r\n   *   seconds: 0\r\n   * }\r\n   * ```\r\n   */\r\n  parseDuration (value) {\r\n    let duration = new Duration(value)\r\n    return duration.JSON\r\n  }\r\n\r\n  /**\r\n   * Create an [ISO-8601 duration string](https://en.wikipedia.org/wiki/ISO_8601#Durations).\r\n   * @warn Only integers may be supplied as arguments. If a decimal/float value is\r\n   * supplied, it will be rounded down to the nearest integer.\r\n   * @param  {Number} [years=0]\r\n   * @param  {Number} [months=0]\r\n   * @param  {Number} [weeks=0]\r\n   * @param  {Number} [days=0]\r\n   * @param  {Number} [hours=0]\r\n   * @param  {Number} [minutes=0]\r\n   * @param  {Number} [seconds=0]\r\n   * @return {string}\r\n   * Returns a string like `P1Y2M3DT5H30M1S`, which translates to a duration of\r\n   * 1 year, 2 months, 3 days, 5 hours, 30 minutes, and 1 second.\r\n   */\r\n  createDurationString (years = 0, months = 0, weeks = 0, days = 0, hours = 0, minutes = 0, seconds = 0) {\r\n    let duration = new Duration()\r\n\r\n    // Only allow integers\r\n    duration.years = Math.floor(years)\r\n    duration.months = Math.floor(months)\r\n    duration.weeks = Math.floor(weeks)\r\n    duration.days = Math.floor(days)\r\n    duration.hours = Math.floor(hours)\r\n    duration.minutes = Math.floor(minutes)\r\n    duration.seconds = Math.floor(seconds)\r\n\r\n    return duration.toString()\r\n  }\r\n\r\n  /**\r\n   * Parse an ISO-8601:2004 repeating interval (recurrence) pattern to a usable object.\r\n   * @param {string} datestring\r\n   * The date/recurrence string, which should follow the [Rn/YYYY-MM-DDTHH:NN:SSZ/PnYnMnWnDTnHnMnS pattern](https://en.wikipedia.org/wiki/ISO_8601#Durations).\r\n   * For example, `R5/2008-03-01T13:00:00Z/P1Y2M10DT2H30M` indicates the\r\n   * pattern should be repeated 5 times, starting on March 1, 2008 at 1:00PM UTC. It should be repeated every 1 year, 2 months, 10 days, 2 hours, and 30 minutes.\r\n   * @param {boolean} [calculateIntervals=false]\r\n   * Set this to `true` to add an array of intervals. Using the `R5/2008-03-01T13:00:00Z/P1Y2M10DT2H30M` example,\r\n   * the recurrence pattern would start on March 1, 2008 at 1:00PM UTC, yielding the following interval dates:\r\n   *\r\n   * ```\r\n   * [\r\n   *   2009-05-11T15:30:00Z, // Occurrence 1\r\n   *   2010-07-21T18:00:00Z, // Occurrence 2\r\n   *   2011-10-01T20:30:00Z, // Occurrence 3\r\n   *   2012-12-11T23:00:00Z, // Occurrence 4\r\n   *   2014-02-22T01:30:00Z, // Occurrence 5 (Last Occurrence)\r\n   * ]\r\n   * ```\r\n   * @return {object}\r\n   * Returns an object like:\r\n   * ```\r\n   * {\r\n   *   source: 'R5/2008-03-01T13:00:00Z/P1Y2M10DT2H30M',\r\n   *   period: 'P1Y2M10DT2H30M',\r\n   *   valid: true, // Indicates input is a valid recurrence duration pattern.\r\n   *   years: 1,\r\n   *   months: 2,\r\n   *   weeks: 0,\r\n   *   days: 10,\r\n   *   hours: 2,\r\n   *   minutes: 30,\r\n   *   seconds: 0,\r\n   *   start: Date, // 2008-03-01\r\n   *   end: Date, // 2014-02-23T01:30:00Z\r\n   *   intervalCount: 5, // This will be -1 if the interval is indefinite (forever).\r\n   *   intervals: [ // OPTIONAL (only if calculateIntervals is true)\r\n   *     ...\r\n   *   ]\r\n   * }\r\n   * ```\r\n   */\r\n  parseInterval (value, calculateIntervals = false) {\r\n    return new this.Interval(value).JSON\r\n\r\n    if (!this.METADATA.PATTERN.ISO8601R.test(value)) {\r\n      return {\r\n        source: value,\r\n        valid: false,\r\n        years: 0,\r\n        months: 0,\r\n        weeks: 0,\r\n        days: 0,\r\n        hours: 0,\r\n        minutes: 0,\r\n        seconds: 0,\r\n        start: null,\r\n        end: null,\r\n        timezone: null,\r\n        intervalCount: 0\r\n      }\r\n    }\r\n\r\n    let match = this.METADATA.PATTERN.ISO8601R.exec(value)\r\n\r\n    // Populate base results\r\n    let result = {\r\n      source: value,\r\n      valid: true,\r\n      intervalCount: match[1] === undefined ? -1 : parseInt(match[1]),\r\n      start: new Date(`${match[2]}T${NGN.coalesce(match[3], '00:00:00Z')}`),\r\n      years: 0,\r\n      months: 0,\r\n      weeks: 0,\r\n      days: 0,\r\n      hours: 0,\r\n      minutes: 0,\r\n      seconds: 0,\r\n      timezone: NGN.coalesce(match[4])\r\n    }\r\n\r\n    let period\r\n    if (match[4]) {\r\n      period = this.parseDuration(match[5])\r\n    }\r\n\r\n    // Parse the period pattern\r\n    if (match[4]) {\r\n      result.period = period.source\r\n      result.years = period.years\r\n      result.months = period.months\r\n      result.weeks = period.weeks\r\n      result.days = period.days\r\n      result.hours = period.hours\r\n      result.minutes = period.minutes\r\n      result.seconds = period.seconds\r\n      result.valid = period.valid\r\n    }\r\n\r\n    // Generate the intervals\r\n    if (calculateIntervals && match[1] && match[5]) {\r\n      result.intervals = []\r\n\r\n      let currentDate = result.start\r\n\r\n      for (let i = 0; i < result.intervalCount; i++) {\r\n        currentDate = this.addDuration(currentDate, period)\r\n\r\n        result.intervals.push(toString(currentDate))\r\n      }\r\n\r\n      result.end = currentDate\r\n    } else if (match[1] !== null) {\r\n      // let futurePeriod = {\r\n      //   years: result.years * result.intervalCount,\r\n      //   months: result.months * result.intervalCount,\r\n      //   weeks: result.weeks * result.intervalCount,\r\n      //   days: result.days * result.intervalCount,\r\n      //   hours: result.hours * result.intervalCount,\r\n      //   minutes: result.minutes * result.intervalCount,\r\n      //   seconds: result.seconds * result.intervalCount,\r\n      //   valid: true\r\n      // }\r\n\r\n      result.end = new Date(result.start.getTime())\r\n\r\n      for (let i = 0; i < result.intervalCount; i++) {\r\n        result.end = new Date(this.addDuration(result.end, period).getTime())\r\n      }\r\n    } else {\r\n      result.end = null\r\n    }\r\n\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * Create an [ISO-8601 repeating interval string](https://en.wikipedia.org/wiki/ISO_8601#Repeating_intervals).\r\n   * @warn Only integers may be supplied as arguments. If a decimal/float value is\r\n   * supplied, it will be rounded down to the nearest integer.\r\n   * @param  {Date} [start=null]\r\n   * The date when the interval starts.\r\n   * @param  {Number} [interval=0]\r\n   * The number of intervals. To secify an unending interval (i.e. forever),\r\n   * this can be set to `null` or a value less than or equal to `0`.\r\n   * @param  {Number} [years=0]\r\n   * @param  {Number} [months=0]\r\n   * @param  {Number} [weeks=0]\r\n   * @param  {Number} [days=0]\r\n   * @param  {Number} [hours=0]\r\n   * @param  {Number} [minutes=0]\r\n   * @param  {Number} [seconds=0]\r\n   * Returns a string like `R3/2018-03-01T15:00:00Z/P1Y2M3DT5H30M1S`, which\r\n   * says \"Starting on March 3, 2018 at 2:00PM UTC, repeat every 1 year,\r\n   * 2 months, 3 days, 5 hours, 30 minutes, and 1 second until the interval\r\n   * has been executed 3 times.\"\r\n   */\r\n  createRepeatingIntervalString (start = null, interval = 0, years = 0, months = 0, weeks = 0, days = 0, hours = 0, minutes = 0, seconds = 0) {\r\n    let str = 'R'\r\n    let duration = this.createDurationString(years, months, weeks, days, hours, minutes, seconds)\r\n\r\n    if (typeof interval === 'number' && interval >= 0) {\r\n      str = `R${interval}`\r\n    }\r\n\r\n    return `${str}/${start.toISOString()}/${duration}`\r\n  }\r\n\r\n  /**\r\n   * Create a NGNX.DATE.Iterator using an [ISO-8601 repeating interval string](https://en.wikipedia.org/wiki/ISO_8601#Repeating_intervals).\r\n   * @param  {Date} interval\r\n   * The ISO-8601 repeating interval/duration. This will be in `Rn/YYYY-MM-DDTHH:NN:SSZPnYnMnDTnHnMnS` format.\r\n   * This type of duration can be generated using the #createRepeatingIntervalString method.\r\n   * @return {[type]}                    [description]\r\n   */\r\n  createRepeatingIntervalIterator (intervalString) {\r\n    return new this.Iterator(intervalString)\r\n  }\r\n}\r\n","import DateTime from './DateTime'\r\n\r\nNGNX.extend('DATE', NGN.const(new DateTime()))\r\n"],"names":["Iterator","Interval"],"mappings":";;AAAA;;;;;AAKA,AAAe,MAAM,QAAQ,CAAC;;;;;;EAM5B,WAAW,CAAC,CAAC,QAAQ,GAAG,IAAI,EAAE;IAC5B,MAAM,CAAC,gBAAgB,CAAC,IAAI,EAAE;MAC5B,QAAQ,EAAE,GAAG,CAAC,OAAO,CAAC;QACpB,MAAM,EAAE,QAAQ;QAChB,KAAK,EAAE,KAAK;QACZ,KAAK,EAAE,CAAC;QACR,MAAM,EAAE,CAAC;QACT,KAAK,EAAE,CAAC;QACR,IAAI,EAAE,CAAC;QACP,KAAK,EAAE,CAAC;QACR,OAAO,EAAE,CAAC;QACV,OAAO,EAAE,CAAC;OACX,CAAC;;MAEF,OAAO,EAAE,GAAG,CAAC,YAAY,CAAC;QACxB,QAAQ,EAAE,sEAAsE;;QAEhF,aAAa,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE,MAAM,KAAK;UACvC,IAAI,OAAO,GAAG,GAAG,EAAE;YACjB,MAAM,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,GAAG,GAAG,CAAC,CAAC,EAAC;YACzC,OAAO,GAAG,OAAO,IAAI,GAAG,GAAG,CAAC,EAAC;WAC9B;SACF;OACF,CAAC;KACH,EAAC;;IAEF,IAAI,QAAQ,KAAK,IAAI,EAAE;MACrB,IAAI,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAC;;MAEhD,IAAI,KAAK,KAAK,IAAI,EAAE;QAClB,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAC;QACpC,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAC;QACrC,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAC;QACpC,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAC;QACnC,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,EAAC;QACrC,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,EAAC;QACvC,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,EAAC;OACxC;KACF;GACF;;;;;;;;;;;;;;;;;;;EAmBD,IAAI,IAAI,CAAC,GAAG;IACV,OAAO;MACL,MAAM,EAAE,IAAI,CAAC,MAAM;MACnB,KAAK,EAAE,IAAI,CAAC,KAAK;MACjB,KAAK,EAAE,IAAI,CAAC,KAAK;MACjB,MAAM,EAAE,IAAI,CAAC,MAAM;MACnB,KAAK,EAAE,IAAI,CAAC,KAAK;MACjB,IAAI,EAAE,IAAI,CAAC,IAAI;MACf,KAAK,EAAE,IAAI,CAAC,KAAK;MACjB,OAAO,EAAE,IAAI,CAAC,OAAO;MACrB,OAAO,EAAE,IAAI,CAAC,OAAO;KACtB;GACF;;EAED,IAAI,MAAM,CAAC,GAAG;IACZ,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM;GAC5B;;EAED,IAAI,MAAM,CAAC,CAAC,KAAK,EAAE;IACjB,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,MAAK;GAC7B;;EAED,IAAI,KAAK,CAAC,GAAG;IACX,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;MACrD,OAAO,KAAK;KACb;;IAED,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,MAAM,CAAC,EAAE;MACvK,GAAG,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,6JAA6J,CAAC,EAAC;MACjM,OAAO,KAAK;KACb;;IAED,IAAI,IAAI,CAAC,KAAK,GAAG,EAAE,EAAE;MACnB,GAAG,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,wGAAwG,CAAC,EAAC;KAC7I;;IAED,OAAO,IAAI;GACZ;;EAED,IAAI,KAAK,CAAC,GAAG;IACX,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK;GAC3B;;EAED,IAAI,KAAK,CAAC,CAAC,KAAK,EAAE;IAChB,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,EAAC;;IAEvC,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,CAAC,EAAE;MAC3B,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC;KACzD;GACF;;EAED,IAAI,MAAM,CAAC,GAAG;IACZ,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM;GAC5B;;EAED,IAAI,MAAM,CAAC,CAAC,KAAK,EAAE;IACjB,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,EAAC;;IAExC,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;MAC5B,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC;KAC1D;;IAED,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAC;GAC1E;;EAED,IAAI,KAAK,CAAC,GAAG;IACX,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK;GAC3B;;EAED,IAAI,KAAK,CAAC,CAAC,KAAK,EAAE;IAChB,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,EAAC;;IAEvC,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,CAAC,EAAE;MAC3B,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC;KACzD;;IAED,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAC;GACzE;;EAED,IAAI,IAAI,CAAC,GAAG;IACV,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI;GAC1B;;EAED,IAAI,IAAI,CAAC,CAAC,KAAK,EAAE;IACf,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,EAAC;;IAEtC,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,CAAC,EAAE;MAC1B,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC;KACxD;GACF;;EAED,IAAI,KAAK,CAAC,GAAG;IACX,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK;GAC3B;;EAED,IAAI,KAAK,CAAC,CAAC,KAAK,EAAE;IAChB,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,EAAC;;IAEvC,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,CAAC,EAAE;MAC3B,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC;KACzD;;IAED,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAC;GACxE;;EAED,IAAI,OAAO,CAAC,GAAG;IACb,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO;GAC7B;;EAED,IAAI,OAAO,CAAC,CAAC,KAAK,EAAE;IAClB,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,EAAC;;IAEzC,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAG,CAAC,EAAE;MAC7B,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC;KAC3D;;IAED,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAC;GAC3E;;EAED,IAAI,OAAO,CAAC,GAAG;IACb,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO;GAC7B;;EAED,IAAI,OAAO,CAAC,CAAC,KAAK,EAAE;IAClB,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,EAAC;;IAEzC,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAG,CAAC,EAAE;MAC7B,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC;KAC3D;;IAED,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAC;GAC7E;;EAED,QAAQ,CAAC,GAAG;IACV,IAAI,GAAG,GAAG,IAAG;;IAEb,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,CAAC,EAAE;MAC3B,GAAG,IAAI,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAC;KACjC;;IAED,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;MAC5B,GAAG,IAAI,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAC;KAClC;;IAED,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,CAAC,EAAE;MAC3B,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,KAAK,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,KAAK,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,KAAK,CAAC,EAAE;QAC3F,GAAG,IAAI,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAC;OACjC,MAAM;QACL,IAAI,CAAC,QAAQ,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,CAAC,EAAC;OAC1D;KACF;;IAED,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,CAAC,EAAE;MAC1B,GAAG,IAAI,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAC;KAChC;;;;IAID,IAAI,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;MACzB,OAAO,GAAG;KACX;;IAED,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAG,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAG,CAAC,EAAE;MACrF,GAAG,IAAI,IAAG;;MAEV,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,CAAC,EAAE;QAC3B,GAAG,IAAI,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAC;OACjC;;MAED,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAG,CAAC,EAAE;QAC7B,GAAG,IAAI,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,EAAC;OACnC;;MAED,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAG,CAAC,EAAE;QAC7B,GAAG,IAAI,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,EAAC;OACnC;KACF;;IAED,OAAO,GAAG;GACX;CACF;;ACvPD;;;;;;AAMA,AAAe,MAAM,YAAY,CAAC;;;;;;;EAOhC,WAAW,CAAC,CAAC,QAAQ,EAAE;IACrB,MAAM,CAAC,gBAAgB,CAAC,IAAI,EAAE;MAC5B,QAAQ,EAAE,GAAG,CAAC,OAAO,CAAC;QACpB,MAAM,EAAE,QAAQ;QAChB,KAAK,EAAE,CAAC;QACR,MAAM,EAAE,CAAC;QACT,KAAK,EAAE,CAAC;QACR,IAAI,EAAE,CAAC;QACP,KAAK,EAAE,CAAC;QACR,OAAO,EAAE,CAAC;QACV,OAAO,EAAE,CAAC;QACV,KAAK,EAAE,IAAI;QACX,GAAG,EAAE,IAAI;QACT,QAAQ,EAAE,IAAI;QACd,aAAa,EAAE,CAAC;QAChB,QAAQ,EAAE,IAAI;OACf,CAAC;;MAEF,OAAO,EAAE,GAAG,CAAC,YAAY,CAAC;QACxB,IAAI,EAAE,kEAAkE;QACxE,MAAM,EAAE,4EAA4E;;OAErF,CAAC;KACH,EAAC;;IAEF,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC,IAAI,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAC;;;IAGlD,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,CAAC,KAAK;;MAE1C,IAAI,CAAC,KAAK,CAAC,IAAI,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;QACxC,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC,EAAE,EAAE,EAAC;OACpF,MAAM;;;QAGL,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;UACrC,IAAI,CAAC,QAAQ,CAAC,QAAQ,GAAG,IAAI,QAAQ,CAAC,OAAO,EAAC;SAC/C,MAAM;UACL,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,KAAK,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,KAAK,IAAI,EAAE;YACnE,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC,OAAO,EAAC;WACxC,MAAM;YACL,IAAI,CAAC,QAAQ,CAAC,GAAG,GAAG,IAAI,IAAI,CAAC,OAAO,EAAC;WACtC;SACF;OACF;KACF,EAAC;;IAEF,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,KAAK,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,KAAK,IAAI,EAAE;AACpE,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;MAC5D,IAAI,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,EAAC;;MAErG,IAAI,CAAC,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC,EAAC;KACjC;;IAED,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAC;IACtB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAC;GAC7B;;EAED,IAAI,MAAM,CAAC,GAAG;IACZ,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM;GAC5B;;EAED,IAAI,MAAM,CAAC,CAAC,KAAK,EAAE;IACjB,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,MAAK;GAC7B;;EAED,IAAI,KAAK,CAAC,GAAG;IACX,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,KAAK,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,KAAK,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,KAAK,IAAI,EAAE;MACjG,GAAG,CAAC,IAAI,CAAC,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,8GAA8G,CAAC,EAAC;MACrJ,OAAO,KAAK;KACb;;IAED,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,KAAK,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,KAAK,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE;MAC/H,GAAG,CAAC,IAAI,CAAC,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,yDAAyD,CAAC,EAAC;MAChG,OAAO,KAAK;KACb;;IAED,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,MAAM,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,KAAK,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,KAAK,IAAI,EAAE;MACrO,GAAG,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,6JAA6J,CAAC,EAAC;MACrM,OAAO,KAAK;KACb;;IAED,OAAO,IAAI;GACZ;;EAED,IAAI,SAAS,CAAC,GAAG;IACf,OAAO,IAAI,CAAC,QAAQ,CAAC,aAAa,KAAK,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,aAAa,KAAK,CAAC;GACrF;;EAED,IAAI,QAAQ,CAAC,GAAG;IACd,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,GAAG,IAAI;GACzE;;EAED,IAAI,KAAK,CAAC,GAAG;IACX,OAAO,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC,KAAK;GAChE;;EAED,IAAI,KAAK,CAAC,CAAC,KAAK,EAAE;IAChB,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,KAAK,IAAI,EAAE;MACnC,IAAI,CAAC,QAAQ,CAAC,QAAQ,GAAG,IAAI,QAAQ,GAAE;KACxC;;IAED,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,GAAG,MAAK;GACrC;;EAED,IAAI,MAAM,CAAC,GAAG;IACZ,OAAO,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,MAAM;GAClE;;EAED,IAAI,MAAM,CAAC,CAAC,KAAK,EAAE;IACjB,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,KAAK,IAAI,EAAE;MACnC,IAAI,CAAC,QAAQ,CAAC,QAAQ,GAAG,IAAI,QAAQ,GAAE;KACxC;;IAED,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,MAAK;GACtC;;EAED,IAAI,KAAK,CAAC,GAAG;IACX,OAAO,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC,KAAK;GAChE;;EAED,IAAI,KAAK,CAAC,CAAC,KAAK,EAAE;IAChB,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,KAAK,IAAI,EAAE;MACnC,IAAI,CAAC,QAAQ,CAAC,QAAQ,GAAG,IAAI,QAAQ,GAAE;KACxC;;IAED,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,GAAG,MAAK;GACrC;;EAED,IAAI,IAAI,CAAC,GAAG;IACV,OAAO,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,IAAI;GAC9D;;EAED,IAAI,IAAI,CAAC,CAAC,KAAK,EAAE;IACf,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,KAAK,IAAI,EAAE;MACnC,IAAI,CAAC,QAAQ,CAAC,QAAQ,GAAG,IAAI,QAAQ,GAAE;KACxC;;IAED,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,GAAG,MAAK;GACpC;;EAED,IAAI,KAAK,CAAC,GAAG;IACX,OAAO,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC,KAAK;GAChE;;EAED,IAAI,KAAK,CAAC,CAAC,KAAK,EAAE;IAChB,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,KAAK,IAAI,EAAE;MACnC,IAAI,CAAC,QAAQ,CAAC,QAAQ,GAAG,IAAI,QAAQ,GAAE;KACxC;;IAED,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,GAAG,MAAK;GACrC;;EAED,IAAI,OAAO,CAAC,GAAG;IACb,OAAO,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC,OAAO;GACpE;;EAED,IAAI,OAAO,CAAC,CAAC,KAAK,EAAE;IAClB,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,KAAK,IAAI,EAAE;MACnC,IAAI,CAAC,QAAQ,CAAC,QAAQ,GAAG,IAAI,QAAQ,GAAE;KACxC;;IAED,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,GAAG,MAAK;GACvC;;EAED,IAAI,OAAO,CAAC,GAAG;IACb,OAAO,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC,OAAO;GACpE;;EAED,IAAI,OAAO,CAAC,CAAC,KAAK,EAAE;IAClB,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,KAAK,IAAI,EAAE;MACnC,IAAI,CAAC,QAAQ,CAAC,QAAQ,GAAG,IAAI,QAAQ,GAAE;KACxC;;IAED,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,GAAG,MAAK;GACvC;;EAED,IAAI,KAAK,CAAC,GAAG;IACX,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK;GAC3B;;EAED,IAAI,KAAK,CAAC,CAAC,KAAK,EAAE;IAChB,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,MAAK;GAC5B;;EAED,IAAI,GAAG,CAAC,GAAG;IACT,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG;GACzB;;EAED,IAAI,GAAG,CAAC,CAAC,KAAK,EAAE;IACd,IAAI,CAAC,QAAQ,CAAC,GAAG,GAAG,MAAK;GAC1B;;EAED,IAAI,QAAQ,CAAC,GAAG;IACd,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ;GAC9B;;EAED,IAAI,QAAQ,CAAC,CAAC,KAAK,EAAE;IACnB,IAAI,CAAC,QAAQ,CAAC,QAAQ,GAAG,MAAK;GAC/B;;EAED,IAAI,aAAa,CAAC,GAAG;IACnB,OAAO,IAAI,CAAC,QAAQ,CAAC,aAAa;GACnC;;EAED,IAAI,aAAa,CAAC,CAAC,KAAK,EAAE;IACxB,IAAI,CAAC,QAAQ,CAAC,aAAa,GAAG,MAAK;GACpC;;;;;;;;;EASD,IAAI,KAAK,CAAC,GAAG;IACX,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,KAAK,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,KAAK,IAAI,EAAE;MAC9D,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,GAAG,KAAK,GAAG,MAAM;KAChE;;IAED,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,KAAK,IAAI,GAAG,KAAK,GAAG,MAAM;GACrD;;EAED,IAAI,IAAI,CAAC,GAAG;IACV,OAAO;MACL,MAAM,EAAE,IAAI,CAAC,QAAQ,EAAE;MACvB,KAAK,EAAE,IAAI,CAAC,KAAK;MACjB,MAAM,EAAE,IAAI,CAAC,MAAM;MACnB,KAAK,EAAE,IAAI,CAAC,KAAK;MACjB,IAAI,EAAE,IAAI,CAAC,IAAI;MACf,KAAK,EAAE,IAAI,CAAC,KAAK;MACjB,OAAO,EAAE,IAAI,CAAC,OAAO;MACrB,OAAO,EAAE,IAAI,CAAC,OAAO;MACrB,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ;MAChC,QAAQ,EAAE,IAAI,CAAC,QAAQ;MACvB,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK;MAC1B,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG;MACtB,SAAS,EAAE,IAAI,CAAC,SAAS;MACzB,aAAa,EAAE,IAAI,CAAC,QAAQ,CAAC,aAAa;MAC1C,KAAK,EAAE,IAAI,CAAC,KAAK;KAClB;GACF;;EAED,IAAI,UAAU,CAAC,GAAG;IAChB,OAAO,aAAa;GACrB;;EAED,QAAQ,CAAC,GAAG;IACV,IAAI,GAAG,GAAG,GAAE;;;IAGZ,IAAI,IAAI,CAAC,SAAS,EAAE;MAClB,GAAG,CAAC,CAAC,CAAC,GAAG,IAAG;MACZ,IAAI,IAAI,CAAC,QAAQ,CAAC,aAAa,KAAK,QAAQ,IAAI,OAAO,IAAI,CAAC,QAAQ,CAAC,aAAa,KAAK,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,aAAa,GAAG,CAAC,EAAE;QAClI,GAAG,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,cAAa;OACtC;KACF;;IAED,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,KAAK,IAAI,KAAK,IAAI,CAAC,QAAQ,CAAC,GAAG,KAAK,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,KAAK,IAAI,CAAC,EAAE;MACnG,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAC;KACtG;;IAED,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,KAAK,IAAI,EAAE;MACnC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAAC;KAC5C;;IAED,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,KAAK,IAAI,KAAK,IAAI,CAAC,QAAQ,CAAC,KAAK,KAAK,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,KAAK,IAAI,CAAC,EAAE;MACnG,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAC;KACpG;;IAED,OAAO,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC;GACrB;CACF;;AChSD;;;;;;AAMA,AAAe,MAAM,YAAY,CAAC;EAChC,WAAW,CAAC,CAAC,OAAO,EAAE;IACpB,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,iBAAiB,EAAC;IACvC,IAAI,QAAQ,GAAG,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,KAAK,CAAC,EAAC;;IAExE,MAAM,CAAC,gBAAgB,CAAC,IAAI,EAAE;MAC5B,OAAO,EAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC;MAC3B,QAAQ;MACR,WAAW,EAAE,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC;MAC9B,cAAc,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;MAC9B,YAAY,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;KAC7B,EAAC;;IAEF,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE;MACxB,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC;KAC5C;;IAED,IAAI,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,MAAM,EAAE;MAC9C,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC;KACvC;;IAED,IAAI,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE;MAC5B,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC;KAC9C;;IAED,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAK;IACtC,IAAI,CAAC,YAAY,GAAG,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC,CAAC,EAAC;GAClE;;;;;;EAMD,IAAI,IAAI,CAAC,CAAC,IAAI,EAAE;IACd,IAAI,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,MAAM,EAAE;MAC/B,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC;KACjC;;IAED,IAAI,CAAC,WAAW,GAAG,KAAI;GACxB;;EAED,IAAI,IAAI,CAAC,GAAG;IACV,OAAO,IAAI,CAAC,WAAW;GACxB;;;;;;;;;;;;EAYD,IAAI,CAAC,CAAC,KAAK,GAAG,IAAI,EAAE;IAClB,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,KAAK,CAAC,EAAE;MAChC,IAAI,KAAK,GAAG,CAAC,EAAE;QACb,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;OACtC;;MAED,IAAI,IAAI,GAAG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,eAAc;MAClD,IAAI,IAAI,IAAI,CAAC,EAAE;QACb,OAAO,EAAE;OACV;;MAED,KAAK,GAAG,IAAI,GAAG,KAAK,GAAG,IAAI,GAAG,MAAK;;MAEnC,IAAI,MAAM,GAAG,GAAE;MACf,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;QAC9B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,EAAC;OACzB;;MAED,OAAO,MAAM;KACd;;IAED,IAAI,IAAI,CAAC,YAAY,IAAI,CAAC,IAAI,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,YAAY,EAAE;MACrE,GAAG,CAAC,IAAI,CAAC,CAAC,sCAAsC,EAAE,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,EAAC;MACxE,OAAO,IAAI,CAAC,WAAW;KACxB;;IAED,IAAI,CAAC,cAAc,GAAE;IACrB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,QAAQ,EAAC;;IAEzE,OAAO,IAAI,CAAC,WAAW;GACxB;;;;;;;;;;;;EAYD,QAAQ,CAAC,CAAC,KAAK,EAAE;IACf,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,KAAK,CAAC,EAAE;MAChC,IAAI,KAAK,GAAG,CAAC,EAAE;QACb,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;OAClC;;MAED,IAAI,IAAI,GAAG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,eAAc;MAClD,IAAI,IAAI,IAAI,CAAC,EAAE;QACb,OAAO,EAAE;OACV;;MAED,KAAK,GAAG,IAAI,GAAG,KAAK,GAAG,IAAI,GAAG,MAAK;;MAEnC,IAAI,MAAM,GAAG,GAAE;MACf,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;QAC9B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAC;OAC7B;;MAED,OAAO,MAAM;KACd;;IAED,IAAI,IAAI,CAAC,YAAY,IAAI,CAAC,IAAI,IAAI,CAAC,cAAc,KAAK,CAAC,EAAE;MACvD,GAAG,CAAC,IAAI,CAAC,8BAA8B,EAAC;MACxC,OAAO,IAAI,CAAC,WAAW;KACxB;;IAED,IAAI,CAAC,cAAc,GAAE;IACrB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,QAAQ,EAAC;IAC9E,OAAO,IAAI,CAAC,WAAW;GACxB;;;;;EAKD,KAAK,CAAC,GAAG;IACP,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAK;IACtC,IAAI,CAAC,cAAc,GAAG,EAAC;GACxB;CACF;;ACzID;;;;;;;;;;AAUA,AAAe,MAAM,QAAQ,SAAS,GAAG,CAAC,YAAY,CAAC;EACrD,WAAW,CAAC,GAAG;IACb,KAAK,CAAC,GAAG,SAAS,EAAC;;;IAGnB,IAAI,aAAa,GAAG,IAAG;;IAEvB,IAAI;MACF,IAAI,EAAE,GAAG,IAAI,IAAI,CAAC,qBAAqB,EAAC;;MAExC,IAAI,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;QACzB,aAAa,GAAG,IAAG;OACpB,MAAM;;QAEL,EAAE,GAAG,EAAE,CAAC,OAAO,GAAE;OAClB;KACF,CAAC,OAAO,CAAC,EAAE;MACV,aAAa,GAAG,IAAG;KACpB;;IAED,MAAM,CAAC,gBAAgB,CAAC,IAAI,EAAE;MAC5B,QAAQ,EAAE,GAAG,CAAC,KAAK,CAACA,YAAQ,CAAC;MAC7B,QAAQ,EAAE,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC;MAC7B,QAAQ,EAAE,GAAG,CAAC,KAAK,CAACC,YAAQ,CAAC;;MAE7B,QAAQ,EAAE,GAAG,CAAC,YAAY,CAAC;;QAEzB,MAAM,EAAE,OAAO;;QAEf,SAAS,EAAE,aAAa;;QAExB,WAAW,EAAE,CAAC,MAAM,KAAK;UACvB,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC;UACzC,IAAI,KAAK,GAAG,GAAE;;UAEd,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YAC1B,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC,EAAC;YACpG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,EAAC;WACjC;;UAED,OAAO,KAAK;SACb;;QAED,aAAa,EAAE,CAAC,MAAM,KAAK;UACzB,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC;UACzC,IAAI,KAAK,GAAG,GAAE;;UAEd,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;YAC3B,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,EAAC;YAClG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAC;WACnC;;UAED,OAAO,KAAK;SACb;;QAED,cAAc,EAAE,CAAC,IAAI,EAAE,MAAM,EAAE,GAAG,GAAG,IAAI,KAAK;UAC5C,IAAI,QAAQ,GAAG,OAAM;;UAErB,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;YAC9B,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,EAAC;;YAErC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE;cACnB,MAAM,IAAI,KAAK,CAAC,CAAC,EAAE,MAAM,CAAC,wBAAwB,CAAC,CAAC;aACrD;WACF;;UAED,IAAI,QAAQ;;;YAGV,CAAC,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI;aACnC,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC;aAClC,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;aACpC,QAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;aACxC,QAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;YAC1C;;;UAGD,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;YACtC,QAAQ,CAAC,MAAM,GAAG,EAAC;WACpB;;UAED,IAAI,QAAO;UACX,IAAI,GAAG,EAAE;YACP,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,KAAK,IAAI,CAAC,CAAC,EAAE,QAAQ,CAAC,EAAE,QAAQ,CAAC,MAAM,EAAC;WACjH,MAAM;YACL,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,IAAI,QAAQ,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAC;WAC/H;;UAED,OAAO,OAAO;SACf;;QAED,MAAM,EAAE,IAAI;QACZ,MAAM,EAAE,KAAK;QACb,IAAI,EAAE,OAAO;QACb,GAAG,EAAE,QAAQ;QACb,IAAI,EAAE,SAAS;QACf,IAAI,EAAE,WAAW;;QAEjB,OAAO,EAAE;;UAEP,QAAQ,EAAE,4JAA4J;;UAEtK,QAAQ,EAAE,sEAAsE;SACjF;OACF,CAAC;KACH,EAAC;GACH;;EAED,IAAI,MAAM,CAAC,GAAG;IACZ,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM;GAC5B;;EAED,IAAI,MAAM,CAAC,CAAC,KAAK,EAAE;IACjB,IAAI,KAAK,KAAK,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;MAClC,IAAI,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAM;;MAE9B,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,MAAK;;MAE5B,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE;QAC3B,GAAG;QACH,GAAG,EAAE,KAAK;OACX,EAAC;KACH;GACF;;;;;;EAMD,IAAI,WAAW,CAAC,GAAG;IACjB,IAAI,EAAE,GAAG,CAAC,IAAI,IAAI,EAAE,EAAE,kBAAkB,GAAE;IAC1C,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,GAAG,EAAC;;IAElB,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC,CAAC;GAC/D;;;;;;EAMD,IAAI,WAAW,CAAC,GAAG;IACjB,OAAO,CAAC,IAAI,IAAI,EAAE,CAAC,iBAAiB,EAAE,IAAI,EAAE,GAAG,IAAI;GACpD;;;;;;EAMD,IAAI,yBAAyB,CAAC,GAAG;IAC/B,OAAO,IAAI,CAAC,oBAAoB,CAAC,IAAI,IAAI,EAAE,CAAC;GAC7C;;;;;;EAMD,IAAI,aAAa,CAAC,GAAG;IACnB,OAAO,IAAI,CAAC,cAAc,EAAE,CAAC,eAAe,EAAE,CAAC,QAAQ;GACxD;;EAED,IAAI,GAAG,CAAC,GAAG;IACT,OAAO,IAAI,IAAI,EAAE;GAClB;;;;;;;;EAQD,oBAAoB,CAAC,CAAC,IAAI,EAAE;IAC1B,IAAI,GAAG,IAAI,GAAG,GAAE;;IAEhB,IAAI,IAAI,GAAG,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,EAAC;;IAEnF,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE;MACX,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,EAAE,EAAC;KACxC,MAAM,IAAI,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;MACrC,OAAO,MAAM,CAAC,EAAE;KACjB;;IAED,OAAO,IAAI;GACZ;;;;;;;;EAQD,UAAU,CAAC,CAAC,IAAI,EAAE;IAChB,MAAM,SAAS,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAC;;IAE1C,IAAI,IAAI,GAAG,SAAS,CAAC,kBAAkB,GAAE;IACzC,IAAI,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,GAAE;;IAE/B,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,EAAC;;IAErC,IAAI,CAAC,GAAG,GAAE;;IAEV,OAAO,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;GACjC;;;;;;;;;EASD,cAAc,CAAC,CAAC,IAAI,EAAE,YAAY,EAAE;IAClC,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,YAAY,CAAC;GAC/C;;;;;;;;;EASD,SAAS,CAAC,CAAC,IAAI,EAAE,OAAO,EAAE;IACxB,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;GACnE;;;;;;;;;EASD,SAAS,CAAC,CAAC,IAAI,EAAE,OAAO,EAAE;IACxB,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;GACnE;;;;;;;;;EASD,OAAO,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE;IACpB,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;GAC/D;;;;;;;;;EASD,MAAM,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE;IAClB,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;GAC7D;;;;;;;;;EASD,OAAO,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE;IACpB,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;GAC/D;;;;;;;;;EASD,QAAQ,CAAC,CAAC,IAAI,EAAE,MAAM,EAAE;IACtB,MAAM,SAAS,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAC;;IAE1C,IAAI,MAAM,KAAK,CAAC,EAAE;MAChB,OAAO,SAAS;KACjB;;IAED,IAAI,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,EAAC;IACzC,IAAI,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,SAAS,EAAC;;;;;IAKnD,IAAI,MAAM,IAAI,EAAE,EAAE;MAChB,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,EAAE,CAAC,EAAC;KACjE,MAAM,IAAI,MAAM,IAAI,CAAC,EAAE,EAAE;MACxB,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC,EAAC;KAChE;;;IAGD,MAAM,GAAG,MAAM,GAAG,GAAE;;IAEpB,IAAI,MAAM,GAAG,CAAC,EAAE;MACd,WAAW,CAAC,WAAW,CAAC,WAAW,CAAC,WAAW,EAAE,GAAG,MAAM,EAAC;KAC5D,MAAM,IAAI,MAAM,GAAG,CAAC,EAAE;MACrB,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAC;;MAEzB,IAAI,YAAY,IAAI,WAAW,CAAC,WAAW,EAAE,GAAG,CAAC,EAAC;;MAElD,IAAI,MAAM,GAAG,YAAY,EAAE;;;QAGzB,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,CAAC,EAAC;QAC3C,MAAM,GAAG,EAAE,GAAG,OAAM;;QAEpB,WAAW,CAAC,WAAW,CAAC,WAAW,CAAC,WAAW,EAAE,GAAG,MAAM,EAAC;OAC5D,MAAM;;;QAGL,MAAM,GAAG,YAAY,GAAG,OAAM;;QAE9B,WAAW,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,EAAC;OACpC;KACF;;IAED,OAAO,IAAI,KAAK,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,IAAI,CAAC,GAAG,WAAW;GACpE;;;;;;;;;EASD,OAAO,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE;IACpB,IAAI,OAAO,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAC;IACtC,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,KAAK,EAAC;;IAElD,OAAO,OAAO;GACf;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA4BD,WAAW,CAAC,CAAC,IAAI,EAAE,MAAM,EAAE;IACzB,OAAO,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,EAAE,MAAM,CAAC;GAClD;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA4BD,gBAAgB,CAAC,CAAC,IAAI,EAAE,MAAM,EAAE;IAC9B,OAAO,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,EAAE,MAAM,EAAE,KAAK,CAAC;GACzD;;;;;;;;;;;;EAYD,IAAI,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE;IAChB,QAAQ,GAAG,CAAC,OAAO,EAAE,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC;GACzC;;;;;;;;;;;;EAYD,WAAW,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE;IACvB,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,KAAK,CAAC,OAAO,EAAE,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM;GAChE;;;;;;;;;;;;EAYD,SAAS,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE;IACrB,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,KAAK,CAAC,OAAO,EAAE,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI;GAC9D;;;;;;;;;;;;EAYD,QAAQ,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE;IACpB,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,KAAK,CAAC,OAAO,EAAE,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG;GAC7D;;;;;;;;;;;;EAYD,SAAS,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE;IACrB,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,KAAK,CAAC,OAAO,EAAE,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI;GAC9D;;;;;;;;;;;;;EAaD,aAAa,CAAC,CAAC,QAAQ,EAAE,OAAO,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE;IAClD,IAAI,MAAM,GAAG,QAAQ,CAAC,UAAU,GAAE;;IAElC,IAAI,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;MAChC,OAAO,QAAQ;KAChB;;IAED,OAAO,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,EAAE;MAC1B,OAAO,CAAC,KAAK,GAAE;KAChB;;IAED,IAAI,KAAI;;IAER,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;MACxB,IAAI,GAAG,EAAE,GAAG,OAAM;KACnB,MAAM;MACL,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,GAAG,OAAM;KAC3B;;IAED,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,CAAC;GACtC;;;;;;;;;;;EAWD,OAAO,CAAC,CAAC,KAAK,EAAE,MAAM,EAAE;IACtB,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;MAC7B,KAAK,GAAG,KAAK,CAAC,SAAS,GAAE;KAC1B,MAAM;MACL,KAAK,IAAI,EAAC;KACX;;IAED,MAAM,GAAG,GAAG,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAC;;IAEnD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE;MACxE,IAAI,CAAC,QAAQ,CAAC,aAAa,GAAG,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,EAAE,EAAC;MAC3E,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,MAAM,EAAC;KACxE;;;IAGD,OAAO,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC;GAClD;;;;;;;;;;;EAWD,SAAS,CAAC,CAAC,KAAK,EAAE,MAAM,EAAE;IACxB,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;MAC7B,KAAK,GAAG,KAAK,CAAC,WAAW,GAAE;KAC5B,MAAM;MACL,KAAK,IAAI,EAAC;KACX;;IAED,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,eAAe,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,MAAM,CAAC,EAAE;MAC5E,IAAI,CAAC,QAAQ,CAAC,eAAe,GAAG,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,eAAe,EAAE,EAAE,EAAC;MAC/E,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,MAAM,EAAC;KAC5E;;IAED,OAAO,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC;GACpD;;;;;;;EAOD,eAAe,CAAC,CAAC,IAAI,EAAE;IACrB,IAAI,EAAE,GAAG,IAAI,CAAC,WAAW,GAAE;IAC3B,IAAI,EAAE,GAAG,IAAI,CAAC,QAAQ,EAAE,GAAG,EAAC;IAC5B,IAAI,GAAG,GAAG,IAAI,CAAC,OAAO,GAAE;;IAExB,IAAI,EAAE,GAAG,EAAE,EAAE;MACX,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,EAAC;KACd;;IAED,IAAI,GAAG,GAAG,EAAE,EAAE;MACZ,GAAG,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAC;KAChB;;IAED,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;GAC5B;;;;;;EAMD,SAAS,CAAC,CAAC,IAAI,EAAE;IACf,IAAI,IAAI,YAAY,IAAI,EAAE;MACxB,OAAO,IAAI;KACZ;;IAED,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAC;;IAEzB,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;GACvD;;;;;;;EAOD,KAAK,CAAC,CAAC,IAAI,EAAE;IACX,IAAI,GAAG,GAAG,IAAI,IAAI,GAAE;;IAEpB,OAAO,IAAI,CAAC,UAAU,EAAE,KAAK,GAAG,CAAC,UAAU,EAAE;MAC3C,IAAI,CAAC,WAAW,EAAE,KAAK,GAAG,CAAC,WAAW,EAAE;MACxC,IAAI,CAAC,cAAc,EAAE,KAAK,GAAG,CAAC,cAAc,EAAE;GACjD;;;;;;;;;;;;;;;;;;;;;;;;;;EA0BD,YAAY,CAAC,CAAC,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE;;IAExC,IAAI,MAAM,CAAC,OAAO,EAAE,KAAK,MAAM,CAAC,OAAO,EAAE,IAAI,IAAI,CAAC,OAAO,EAAE,KAAK,IAAI,CAAC,OAAO,EAAE,EAAE;MAC9E,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC;KACtB;;;IAGD,IAAI,IAAI,GAAG,MAAM,IAAI,MAAM,GAAG,IAAI,EAAE;MAClC,OAAO,EAAE;KACV;;;;;IAKD,IAAI,MAAM,GAAG,MAAM,IAAI,IAAI,GAAG,IAAI,EAAE;MAClC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC;KACtB;;;IAGD,IAAI,MAAM,GAAG,MAAM,IAAI,IAAI,GAAG,IAAI,EAAE;MAClC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC;KACtB;;;IAGD,IAAI,MAAM,GAAG,MAAM,EAAE;MACnB,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC;KACtB;;;IAGD,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC;GACtB;;;;;;;;;;;EAWD,WAAW,CAAC,CAAC,IAAI,GAAG,IAAI,EAAE;IACxB,IAAI,OAAO,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,EAAE,CAAC,CAAC,OAAO,EAAE,EAAC;IAChE,OAAO,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAE,CAAC,EAAC;;IAEpE,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;GAChC;;;;;;;;;;EAUD,UAAU,CAAC,CAAC,IAAI,EAAE;IAChB,IAAI,OAAO,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,EAAE,CAAC,CAAC,OAAO,EAAE,EAAC;IAChE,OAAO,CAAC,WAAW,CAAC,EAAE,EAAC;IACvB,OAAO,CAAC,aAAa,CAAC,EAAE,EAAC;IACzB,OAAO,CAAC,aAAa,CAAC,EAAE,EAAC;IACzB,OAAO,CAAC,kBAAkB,CAAC,GAAG,EAAC;;IAE/B,OAAO,OAAO;GACf;;;;;;;;EAQD,YAAY,CAAC,CAAC,IAAI,GAAG,IAAI,EAAE;IACzB,IAAI,OAAO,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,EAAE,CAAC,CAAC,OAAO,EAAE,EAAC;IAChE,OAAO,CAAC,UAAU,CAAC,CAAC,EAAC;IACrB,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,EAAC;;IAEnC,OAAO,OAAO;GACf;;;;;;;EAOD,WAAW,CAAC,CAAC,IAAI,EAAE;IACjB,IAAI,OAAO,GAAG,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,EAAE,CAAC,EAAE,OAAO,EAAE,EAAC;IAClE,OAAO,CAAC,WAAW,CAAC,CAAC,EAAC;IACtB,OAAO,CAAC,aAAa,CAAC,CAAC,EAAC;IACxB,OAAO,CAAC,aAAa,CAAC,CAAC,EAAC;IACxB,OAAO,CAAC,kBAAkB,CAAC,CAAC,EAAC;;IAE7B,OAAO,OAAO;GACf;;;;;;;EAOD,6BAA6B,CAAC,CAAC,IAAI,EAAE;IACnC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,MAAM,KAAK,CAAC,EAAE;MACrC,OAAO,UAAU;KAClB;;IAED,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,EAAC;;IAEtB,IAAI,EAAE,GAAG,IAAI,CAAC,GAAG,GAAE;IACnB,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC,WAAW,GAAE;;IAEhD,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,EAAC;;IAEzB,IAAI,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,EAAE,EAAE,EAAC;IACpE,IAAI,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,EAAC;;IAEzC,IAAI,EAAE,KAAK,IAAI,IAAI,KAAK,GAAG,EAAE,EAAE;MAC7B,KAAK,GAAG,KAAK,GAAG,GAAE;KACnB;;IAED,KAAK,GAAG,KAAK,CAAC,QAAQ,GAAE;;IAExB,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;MACpB,KAAK,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,EAAC;KACpB;;IAED,OAAO,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC;GAC5B;;;;;;;EAOD,6BAA6B,CAAC,CAAC,IAAI,EAAE;IACnC,MAAM,KAAK,GAAG,KAAI;;IAElB,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,EAAC;IAChC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,EAAC;;IAEtB,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;MACrB,MAAM,IAAI,KAAK,CAAC,CAAC,8BAA8B,EAAE,KAAK,CAAC,CAAC,CAAC;KAC1D;;IAED,IAAI,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,EAAE,EAAE,EAAC;IACzD,IAAI,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,EAAE,EAAE,EAAC;IAC3D,IAAI,EAAE,GAAG,KAAI;;IAEb,IAAI,OAAO,GAAG,EAAE,IAAI,OAAO,GAAG,CAAC,IAAI,KAAK,GAAG,CAAC,IAAI,KAAK,GAAG,EAAE,EAAE;MAC1D,MAAM,IAAI,KAAK,CAAC,CAAC,8BAA8B,EAAE,KAAK,CAAC,CAAC,CAAC;KAC1D;;IAED,IAAI,KAAK,GAAG,EAAE,EAAE;MACd,EAAE,GAAG,KAAI;MACT,KAAK,GAAG,KAAK,GAAG,GAAE;KACnB;;IAED,IAAI,KAAK,GAAG,EAAE,EAAE;MACd,KAAK,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,EAAC;KACpB;;IAED,IAAI,OAAO,GAAG,EAAE,EAAE;MAChB,OAAO,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,EAAC;KACxB;;IAED,OAAO,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;GACnC;;;;;;;;EAQD,eAAe,CAAC,CAAC,IAAI,EAAE,YAAY,GAAG,KAAK,EAAE;IAC3C,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;MAC5B,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,EAAC;MAC1B,IAAI,GAAG,IAAI,CAAC,KAAK,GAAE;MACnB,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,EAAC;MAC9C,IAAI,GAAG,IAAI,CAAC,CAAC,EAAC;MACd,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,EAAC;;MAExB,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,GAAE;;MAE5B,IAAI,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,EAAC;MACrD,IAAI,EAAE,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,EAAE,EAAE,EAAC;MACjE,IAAI,EAAE,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,EAAE,EAAE,EAAC;;MAEjE,IAAI,EAAE,GAAG,EAAE,EAAE;QACX,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,EAAC;OACd;MACD,EAAE,GAAG,EAAE,CAAC,QAAQ,GAAE;;MAElB,IAAI,EAAE,GAAG,EAAE,EAAE;QACX,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,EAAC;OACd;MACD,EAAE,GAAG,EAAE,CAAC,QAAQ,GAAE;;MAElB,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;QACrB,OAAO,CAAC,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,EAAE,CAAC,EAAE,YAAY,GAAG,GAAG,GAAG,GAAG,CAAC,QAAQ,EAAE,YAAY,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC;OAC5I;;MAED,OAAO,CAAC,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,EAAE,CAAC,EAAE,YAAY,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC,EAAE,YAAY,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC;KACvK;;IAED,IAAI,EAAE,GAAG,IAAI,CAAC,WAAW,GAAE;IAC3B,IAAI,GAAG,GAAG,IAAI,CAAC,aAAa,GAAE;;IAE9B,OAAO,IAAI,CAAC,qBAAqB,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;GAC3D;;;;;;;;EAQD,qBAAqB,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE;IACjC,IAAI,EAAE,GAAG,IAAI,CAAC,cAAc,GAAE;IAC9B,IAAI,EAAE,GAAG,IAAI,CAAC,WAAW,EAAE,GAAG,EAAC;IAC/B,IAAI,GAAG,GAAG,IAAI,CAAC,UAAU,GAAE;;IAE3B,IAAI,EAAE,GAAG,EAAE,EAAE;MACX,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,EAAC;KACd;;IAED,IAAI,GAAG,GAAG,EAAE,EAAE;MACZ,GAAG,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAC;KAChB;;IAED,OAAO,CAAC,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;GACnH;;;;;;;EAOD,qBAAqB,CAAC,CAAC,IAAI,EAAE;IAC3B,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAC;IACzB,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,EAAC;;IAEtB,IAAI,EAAE,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,EAAE,EAAE,EAAC;IACtD,IAAI,GAAG,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,EAAC;IAC7E,IAAI,GAAG,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,EAAC;;IAE7E,IAAI,EAAE,GAAG,EAAE,EAAE;MACX,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,EAAC;KACd;IACD,EAAE,GAAG,EAAE,CAAC,QAAQ,GAAE;;IAElB,IAAI,GAAG,GAAG,EAAE,EAAE;MACZ,GAAG,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAC;KAChB;IACD,GAAG,GAAG,GAAG,CAAC,QAAQ,GAAE;;IAEpB,IAAI,GAAG,GAAG,EAAE,EAAE;MACZ,GAAG,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAC;KAChB;IACD,GAAG,GAAG,GAAG,CAAC,QAAQ,GAAE;;IAEpB,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;GAC7B;;;;;;;;EAQD,OAAO,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE;IACnB,IAAI,GAAG,IAAI,CAAC,qBAAqB,CAAC,IAAI,EAAC;IACvC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,EAAC;;IAEtB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC,EAAC;IACxD,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC,EAAC;IAC1D,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC,EAAC;;IAE1D,OAAO,IAAI;GACZ;;;;;;;;;;;;;EAaD,eAAe,CAAC,CAAC,QAAQ,GAAG,EAAE,EAAE,MAAM,GAAG,EAAE,EAAE,aAAa,GAAG,IAAI,EAAE;;IAEjE,IAAI,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,GAAG,EAAE,IAAI,QAAQ,EAAC;IAC/C,IAAI,IAAI,GAAG,MAAM,KAAK,EAAE,GAAG,EAAE,GAAG,EAAC;IACjC,IAAI,EAAE,GAAG,MAAM,KAAK,EAAE,GAAG,IAAI,GAAG,GAAE;IAClC,IAAI,MAAM,GAAG,EAAC;IACd,IAAI,OAAO,GAAG;MACZ,CAAC,EAAE,IAAI,KAAK,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;MACxC;;IAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE;MAClC,MAAM,IAAI,SAAQ;;MAElB,IAAI,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,EAAE,CAAC,GAAG,KAAI;MACvC,IAAI,GAAG,GAAG,MAAM,GAAG,GAAE;;MAErB,IAAI,MAAM,KAAK,EAAE,IAAI,EAAE,GAAG,EAAE,EAAE;QAC5B,EAAE,GAAG,EAAE,GAAG,GAAE;QACZ,EAAE,GAAG,EAAE,KAAK,CAAC,GAAG,EAAE,GAAG,GAAE;;QAEvB,IAAI,MAAM,IAAI,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,EAAE;UAC3B,EAAE,GAAG,KAAI;SACV;OACF;;MAED,IAAI,GAAG,GAAG,EAAE,EAAE;QACZ,GAAG,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,QAAQ,EAAE,CAAC,EAAC;OAC3B;;MAED,IAAI,aAAa,IAAI,EAAE,GAAG,EAAE,EAAE;QAC5B,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,EAAC;OACd;;MAED,IAAI,EAAE,KAAK,IAAI,IAAI,EAAE,KAAK,IAAI,EAAE;QAC9B,OAAO,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAC;OACnC,MAAM;QACL,OAAO,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAC;OAC7B;;;KAGF;;IAED,OAAO,OAAO;GACf;;;;;;;EAOD,SAAS,CAAC,CAAC,IAAI,EAAE;IACf,IAAI,GAAG,GAAG,IAAI,CAAC,SAAS,GAAE;IAC1B,OAAO,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC;GAC1B;;;;;;;EAOD,SAAS,CAAC,CAAC,IAAI,EAAE;IACf,IAAI,GAAG,GAAG,IAAI,CAAC,SAAS,GAAE;IAC1B,OAAO,GAAG,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC;GAC9B;;;;;;EAMD,UAAU,CAAC,CAAC,IAAI,EAAE;IAChB,IAAI,IAAI,GAAG,IAAI,CAAC,cAAc,GAAE;;IAEhC,OAAO,CAAC,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,MAAM,IAAI,GAAG,GAAG,KAAK,CAAC,CAAC,MAAM,IAAI,GAAG,GAAG,KAAK,CAAC,CAAC;GACtE;;;;;;;;;;;;;;;;;EAiBD,OAAO,CAAC,CAAC,IAAI,EAAE,sBAAsB,GAAG,CAAC,EAAE,oBAAoB,GAAG,CAAC,EAAE;IACnE,IAAI,sBAAsB,GAAG,CAAC,IAAI,sBAAsB,GAAG,EAAE,EAAE;MAC7D,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC;KACpE;;IAED,IAAI,oBAAoB,GAAG,CAAC,IAAI,oBAAoB,GAAG,EAAE,EAAE;MACzD,MAAM,IAAI,KAAK,CAAC,qFAAqF,CAAC;KACvG;;IAED,IAAI,KAAK,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,EAAE,sBAAsB,GAAG,CAAC,EAAE,oBAAoB,EAAC;;IAE7F,OAAO,KAAK,GAAG,IAAI,EAAE;MACnB,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC;KAChC;;IAED,IAAI,OAAO,GAAG,EAAC;IACf,OAAO,KAAK,GAAG,IAAI,EAAE;MACnB,OAAO,GAAE;MACT,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,EAAC;KAChC;;IAED,OAAO,OAAO;GACf;;;;;;;;;;;;;;;;;;;;;;;EAuBD,aAAa,CAAC,CAAC,KAAK,EAAE;IACpB,IAAI,QAAQ,GAAG,IAAI,QAAQ,CAAC,KAAK,EAAC;IAClC,OAAO,QAAQ,CAAC,IAAI;GACrB;;;;;;;;;;;;;;;;;EAiBD,oBAAoB,CAAC,CAAC,KAAK,GAAG,CAAC,EAAE,MAAM,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,EAAE,IAAI,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,EAAE,OAAO,GAAG,CAAC,EAAE,OAAO,GAAG,CAAC,EAAE;IACrG,IAAI,QAAQ,GAAG,IAAI,QAAQ,GAAE;;;IAG7B,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,EAAC;IAClC,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAC;IACpC,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,EAAC;IAClC,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,EAAC;IAChC,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,EAAC;IAClC,QAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAC;IACtC,QAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAC;;IAEtC,OAAO,QAAQ,CAAC,QAAQ,EAAE;GAC3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA4CD,aAAa,CAAC,CAAC,KAAK,EAAE,kBAAkB,GAAG,KAAK,EAAE;IAChD,OAAO,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,IAAI;;IAEpC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;MAC/C,OAAO;QACL,MAAM,EAAE,KAAK;QACb,KAAK,EAAE,KAAK;QACZ,KAAK,EAAE,CAAC;QACR,MAAM,EAAE,CAAC;QACT,KAAK,EAAE,CAAC;QACR,IAAI,EAAE,CAAC;QACP,KAAK,EAAE,CAAC;QACR,OAAO,EAAE,CAAC;QACV,OAAO,EAAE,CAAC;QACV,KAAK,EAAE,IAAI;QACX,GAAG,EAAE,IAAI;QACT,QAAQ,EAAE,IAAI;QACd,aAAa,EAAE,CAAC;OACjB;KACF;;IAED,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAC;;;IAGtD,IAAI,MAAM,GAAG;MACX,MAAM,EAAE,KAAK;MACb,KAAK,EAAE,IAAI;MACX,aAAa,EAAE,KAAK,CAAC,CAAC,CAAC,KAAK,SAAS,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;MAC/D,KAAK,EAAE,IAAI,IAAI,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;MACrE,KAAK,EAAE,CAAC;MACR,MAAM,EAAE,CAAC;MACT,KAAK,EAAE,CAAC;MACR,IAAI,EAAE,CAAC;MACP,KAAK,EAAE,CAAC;MACR,OAAO,EAAE,CAAC;MACV,OAAO,EAAE,CAAC;MACV,QAAQ,EAAE,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;MACjC;;IAED,IAAI,OAAM;IACV,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE;MACZ,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,EAAC;KACtC;;;IAGD,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE;MACZ,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,OAAM;MAC7B,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,MAAK;MAC3B,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,OAAM;MAC7B,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,MAAK;MAC3B,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,KAAI;MACzB,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,MAAK;MAC3B,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC,QAAO;MAC/B,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC,QAAO;MAC/B,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,MAAK;KAC5B;;;IAGD,IAAI,kBAAkB,IAAI,KAAK,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE;MAC9C,MAAM,CAAC,SAAS,GAAG,GAAE;;MAErB,IAAI,WAAW,GAAG,MAAM,CAAC,MAAK;;MAE9B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,aAAa,EAAE,CAAC,EAAE,EAAE;QAC7C,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,MAAM,EAAC;;QAEnD,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAC;OAC7C;;MAED,MAAM,CAAC,GAAG,GAAG,YAAW;KACzB,MAAM,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;;;;;;;;;;;;MAY5B,MAAM,CAAC,GAAG,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,EAAC;;MAE7C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,aAAa,EAAE,CAAC,EAAE,EAAE;QAC7C,MAAM,CAAC,GAAG,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,OAAO,EAAE,EAAC;OACtE;KACF,MAAM;MACL,MAAM,CAAC,GAAG,GAAG,KAAI;KAClB;;IAED,OAAO,MAAM;GACd;;;;;;;;;;;;;;;;;;;;;;;EAuBD,6BAA6B,CAAC,CAAC,KAAK,GAAG,IAAI,EAAE,QAAQ,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,EAAE,MAAM,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,EAAE,IAAI,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,EAAE,OAAO,GAAG,CAAC,EAAE,OAAO,GAAG,CAAC,EAAE;IAC1I,IAAI,GAAG,GAAG,IAAG;IACb,IAAI,QAAQ,GAAG,IAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAC;;IAE7F,IAAI,OAAO,QAAQ,KAAK,QAAQ,IAAI,QAAQ,IAAI,CAAC,EAAE;MACjD,GAAG,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC,EAAC;KACrB;;IAED,OAAO,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;GACnD;;;;;;;;;EASD,+BAA+B,CAAC,CAAC,cAAc,EAAE;IAC/C,OAAO,IAAI,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC;GACzC;CACF;;AC3vCD,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,GAAG,CAAC,KAAK,CAAC,IAAI,QAAQ,EAAE,CAAC,CAAC"}